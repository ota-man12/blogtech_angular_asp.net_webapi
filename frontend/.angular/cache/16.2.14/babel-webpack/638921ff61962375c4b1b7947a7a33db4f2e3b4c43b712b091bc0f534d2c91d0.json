{"ast":null,"code":"import _asyncToGenerator from \"/Users/obakengtaphane/Desktop/Projects/blogTech/UI/blogtech/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AsyncPipe, isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, InjectionToken, Pipe, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Input, Output, SecurityContext, NgModule } from '@angular/core';\nimport { Subject, of, timer, merge } from 'rxjs';\nimport { mapTo, switchMap, distinctUntilChanged, shareReplay, startWith, map, takeUntil, first } from 'rxjs/operators';\nimport { Renderer, marked } from 'marked';\nexport { Renderer as MarkedRenderer } from 'marked';\nimport * as i1 from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nconst _c0 = [\"*\"];\nconst BUTTON_TEXT_COPY = 'Copy';\nconst BUTTON_TEXT_COPIED = 'Copied';\nclass ClipboardButtonComponent {\n  constructor() {\n    this._buttonClick$ = new Subject();\n    this.copied$ = this._buttonClick$.pipe(switchMap(() => merge(of(true), timer(3000).pipe(mapTo(false)))), distinctUntilChanged(), shareReplay(1));\n    this.copiedText$ = this.copied$.pipe(startWith(false), map(copied => copied ? BUTTON_TEXT_COPIED : BUTTON_TEXT_COPY));\n  }\n  onCopyToClipboardClick() {\n    this._buttonClick$.next();\n  }\n  static #_ = this.ɵfac = function ClipboardButtonComponent_Factory(t) {\n    return new (t || ClipboardButtonComponent)();\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ClipboardButtonComponent,\n    selectors: [[\"markdown-clipboard\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 4,\n    vars: 7,\n    consts: [[1, \"markdown-clipboard-button\", 3, \"click\"]],\n    template: function ClipboardButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function ClipboardButtonComponent_Template_button_click_0_listener() {\n          return ctx.onCopyToClipboardClick();\n        });\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵtext(2);\n        i0.ɵɵpipe(3, \"async\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"copied\", i0.ɵɵpipeBind1(1, 3, ctx.copied$));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 5, ctx.copiedText$));\n      }\n    },\n    dependencies: [AsyncPipe],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardButtonComponent, [{\n    type: Component,\n    args: [{\n      selector: 'markdown-clipboard',\n      template: `\n    <button\n      class=\"markdown-clipboard-button\"\n      [class.copied]=\"copied$ | async\"\n      (click)=\"onCopyToClipboardClick()\"\n    >{{ copiedText$ | async }}</button>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      standalone: true,\n      imports: [AsyncPipe]\n    }]\n  }], null, null);\n})();\nconst CLIPBOARD_OPTIONS = new InjectionToken('CLIPBOARD_OPTIONS');\n\n/* eslint-disable */\nclass KatexSpecificOptions {}\nclass LanguagePipe {\n  transform(value, language) {\n    if (value == null) {\n      value = '';\n    }\n    if (language == null) {\n      language = '';\n    }\n    if (typeof value !== 'string') {\n      console.error(`LanguagePipe has been invoked with an invalid value type [${typeof value}]`);\n      return value;\n    }\n    if (typeof language !== 'string') {\n      console.error(`LanguagePipe has been invoked with an invalid parameter [${typeof language}]`);\n      return value;\n    }\n    return '```' + language + '\\n' + value + '\\n```';\n  }\n  static #_ = this.ɵfac = function LanguagePipe_Factory(t) {\n    return new (t || LanguagePipe)();\n  };\n  static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"language\",\n    type: LanguagePipe,\n    pure: true,\n    standalone: true\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LanguagePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'language',\n      standalone: true\n    }]\n  }], null, null);\n})();\nvar PrismPlugin;\n(function (PrismPlugin) {\n  PrismPlugin[\"CommandLine\"] = \"command-line\";\n  PrismPlugin[\"LineHighlight\"] = \"line-highlight\";\n  PrismPlugin[\"LineNumbers\"] = \"line-numbers\";\n})(PrismPlugin || (PrismPlugin = {}));\nconst MARKED_EXTENSIONS = new InjectionToken('MARKED_EXTENSIONS');\nconst MARKED_OPTIONS = new InjectionToken('MARKED_OPTIONS');\n\n/* eslint-disable max-len */\nconst errorJoyPixelsNotLoaded = '[ngx-markdown] When using the `emoji` attribute you *have to* include Emoji-Toolkit files to `angular.json` or use imports. See README for more information';\nconst errorKatexNotLoaded = '[ngx-markdown] When using the `katex` attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information';\nconst errorMermaidNotLoaded = '[ngx-markdown] When using the `mermaid` attribute you *have to* include Mermaid files to `angular.json` or use imports. See README for more information';\nconst errorClipboardNotLoaded = '[ngx-markdown] When using the `clipboard` attribute you *have to* include Clipboard files to `angular.json` or use imports. See README for more information';\nconst errorClipboardViewContainerRequired = '[ngx-markdown] When using the `clipboard` attribute you *have to* provide the `viewContainerRef` parameter to `MarkdownService.render()` function';\nconst errorSrcWithoutHttpClient = '[ngx-markdown] When using the `src` attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information';\n/* eslint-enable max-len */\nconst SECURITY_CONTEXT = new InjectionToken('SECURITY_CONTEXT');\nclass ExtendedRenderer extends Renderer {\n  constructor() {\n    super(...arguments);\n    this.ɵNgxMarkdownRendererExtendedForExtensions = false;\n    this.ɵNgxMarkdownRendererExtendedForMermaid = false;\n  }\n}\nclass MarkdownService {\n  get options() {\n    return this._options;\n  }\n  set options(value) {\n    this._options = {\n      ...this.DEFAULT_MARKED_OPTIONS,\n      ...value\n    };\n  }\n  get renderer() {\n    return this.options.renderer;\n  }\n  set renderer(value) {\n    this.options.renderer = value;\n  }\n  constructor(clipboardOptions, extensions, options, platform, securityContext, http, sanitizer) {\n    this.clipboardOptions = clipboardOptions;\n    this.extensions = extensions;\n    this.platform = platform;\n    this.securityContext = securityContext;\n    this.http = http;\n    this.sanitizer = sanitizer;\n    this.DEFAULT_MARKED_OPTIONS = {\n      renderer: new Renderer()\n    };\n    this.DEFAULT_KATEX_OPTIONS = {\n      delimiters: [{\n        left: '$$',\n        right: '$$',\n        display: true\n      }, {\n        left: '$',\n        right: '$',\n        display: false\n      }, {\n        left: '\\\\(',\n        right: '\\\\)',\n        display: false\n      }, {\n        left: '\\\\begin{equation}',\n        right: '\\\\end{equation}',\n        display: true\n      }, {\n        left: '\\\\begin{align}',\n        right: '\\\\end{align}',\n        display: true\n      }, {\n        left: '\\\\begin{alignat}',\n        right: '\\\\end{alignat}',\n        display: true\n      }, {\n        left: '\\\\begin{gather}',\n        right: '\\\\end{gather}',\n        display: true\n      }, {\n        left: '\\\\begin{CD}',\n        right: '\\\\end{CD}',\n        display: true\n      }, {\n        left: '\\\\[',\n        right: '\\\\]',\n        display: true\n      }]\n    };\n    this.DEFAULT_MERMAID_OPTIONS = {\n      startOnLoad: false\n    };\n    this.DEFAULT_CLIPBOARD_OPTIONS = {\n      buttonComponent: undefined\n    };\n    this.DEFAULT_PARSE_OPTIONS = {\n      decodeHtml: false,\n      inline: false,\n      emoji: false,\n      mermaid: false,\n      markedOptions: undefined,\n      disableSanitizer: false\n    };\n    this.DEFAULT_RENDER_OPTIONS = {\n      clipboard: false,\n      clipboardOptions: undefined,\n      katex: false,\n      katexOptions: undefined,\n      mermaid: false,\n      mermaidOptions: undefined\n    };\n    this._reload$ = new Subject();\n    this.reload$ = this._reload$.asObservable();\n    this.options = options;\n  }\n  parse(markdown, parseOptions = this.DEFAULT_PARSE_OPTIONS) {\n    const {\n      decodeHtml,\n      inline,\n      emoji,\n      mermaid,\n      disableSanitizer\n    } = parseOptions;\n    const markedOptions = {\n      ...this.options,\n      ...parseOptions.markedOptions\n    };\n    const renderer = markedOptions.renderer || this.renderer || new Renderer();\n    if (this.extensions) {\n      this.renderer = this.extendsRendererForExtensions(renderer);\n    }\n    if (mermaid) {\n      this.renderer = this.extendsRendererForMermaid(renderer);\n    }\n    const trimmed = this.trimIndentation(markdown);\n    const decoded = decodeHtml ? this.decodeHtml(trimmed) : trimmed;\n    const emojified = emoji ? this.parseEmoji(decoded) : decoded;\n    const marked = this.parseMarked(emojified, markedOptions, inline);\n    const sanitized = disableSanitizer ? marked : this.sanitizer.sanitize(this.securityContext, marked);\n    return sanitized || '';\n  }\n  render(element, options = this.DEFAULT_RENDER_OPTIONS, viewContainerRef) {\n    const {\n      clipboard,\n      clipboardOptions,\n      katex,\n      katexOptions,\n      mermaid,\n      mermaidOptions\n    } = options;\n    if (katex) {\n      this.renderKatex(element, {\n        ...this.DEFAULT_KATEX_OPTIONS,\n        ...katexOptions\n      });\n    }\n    if (mermaid) {\n      this.renderMermaid(element, {\n        ...this.DEFAULT_MERMAID_OPTIONS,\n        ...mermaidOptions\n      });\n    }\n    if (clipboard) {\n      this.renderClipboard(element, viewContainerRef, {\n        ...this.DEFAULT_CLIPBOARD_OPTIONS,\n        ...this.clipboardOptions,\n        ...clipboardOptions\n      });\n    }\n    this.highlight(element);\n  }\n  reload() {\n    this._reload$.next();\n  }\n  getSource(src) {\n    if (!this.http) {\n      throw new Error(errorSrcWithoutHttpClient);\n    }\n    return this.http.get(src, {\n      responseType: 'text'\n    }).pipe(map(markdown => this.handleExtension(src, markdown)));\n  }\n  highlight(element) {\n    if (!isPlatformBrowser(this.platform)) {\n      return;\n    }\n    if (typeof Prism === 'undefined' || typeof Prism.highlightAllUnder === 'undefined') {\n      return;\n    }\n    if (!element) {\n      element = document;\n    }\n    const noLanguageElements = element.querySelectorAll('pre code:not([class*=\"language-\"])');\n    Array.prototype.forEach.call(noLanguageElements, x => x.classList.add('language-none'));\n    Prism.highlightAllUnder(element);\n  }\n  decodeHtml(html) {\n    if (!isPlatformBrowser(this.platform)) {\n      return html;\n    }\n    const textarea = document.createElement('textarea');\n    textarea.innerHTML = html;\n    return textarea.value;\n  }\n  extendsRendererForExtensions(renderer) {\n    const extendedRenderer = renderer;\n    if (extendedRenderer.ɵNgxMarkdownRendererExtendedForExtensions === true) {\n      return renderer;\n    }\n    if (this.extensions?.length > 0) {\n      marked.use(...this.extensions);\n    }\n    extendedRenderer.ɵNgxMarkdownRendererExtendedForExtensions = true;\n    return renderer;\n  }\n  extendsRendererForMermaid(renderer) {\n    const extendedRenderer = renderer;\n    if (extendedRenderer.ɵNgxMarkdownRendererExtendedForMermaid === true) {\n      return renderer;\n    }\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const defaultCode = renderer.code;\n    renderer.code = function (code, language, isEscaped) {\n      return language === 'mermaid' ? `<div class=\"mermaid\">${code}</div>` : defaultCode.call(this, code, language, isEscaped);\n    };\n    extendedRenderer.ɵNgxMarkdownRendererExtendedForMermaid = true;\n    return renderer;\n  }\n  handleExtension(src, markdown) {\n    const urlProtocolIndex = src.lastIndexOf('://');\n    const urlWithoutProtocol = urlProtocolIndex > -1 ? src.substring(urlProtocolIndex + 4) : src;\n    const lastSlashIndex = urlWithoutProtocol.lastIndexOf('/');\n    const lastUrlSegment = lastSlashIndex > -1 ? urlWithoutProtocol.substring(lastSlashIndex + 1).split('?')[0] : '';\n    const lastDotIndex = lastUrlSegment.lastIndexOf('.');\n    const extension = lastDotIndex > -1 ? lastUrlSegment.substring(lastDotIndex + 1) : '';\n    return !!extension && extension !== 'md' ? '```' + extension + '\\n' + markdown + '\\n```' : markdown;\n  }\n  parseMarked(html, markedOptions, inline = false) {\n    if (markedOptions.renderer) {\n      // clone renderer and remove extended flags otherwise\n      // marked throws an error thinking it is a renderer prop\n      const renderer = {\n        ...markedOptions.renderer\n      };\n      delete renderer.ɵNgxMarkdownRendererExtendedForExtensions;\n      delete renderer.ɵNgxMarkdownRendererExtendedForMermaid;\n      // remove renderer from markedOptions because if renderer is\n      // passed to marked.parse method, it will ignore all extensions\n      delete markedOptions.renderer;\n      marked.use({\n        renderer\n      });\n    }\n    return inline ? marked.parseInline(html, markedOptions) : marked.parse(html, markedOptions);\n  }\n  parseEmoji(html) {\n    if (!isPlatformBrowser(this.platform)) {\n      return html;\n    }\n    if (typeof joypixels === 'undefined' || typeof joypixels.shortnameToUnicode === 'undefined') {\n      throw new Error(errorJoyPixelsNotLoaded);\n    }\n    return joypixels.shortnameToUnicode(html);\n  }\n  renderKatex(element, options) {\n    if (!isPlatformBrowser(this.platform)) {\n      return;\n    }\n    if (typeof katex === 'undefined' || typeof renderMathInElement === 'undefined') {\n      throw new Error(errorKatexNotLoaded);\n    }\n    renderMathInElement(element, options);\n  }\n  renderClipboard(element, viewContainerRef, options) {\n    if (!isPlatformBrowser(this.platform)) {\n      return;\n    }\n    if (typeof ClipboardJS === 'undefined') {\n      throw new Error(errorClipboardNotLoaded);\n    }\n    if (!viewContainerRef) {\n      throw new Error(errorClipboardViewContainerRequired);\n    }\n    const {\n      buttonComponent,\n      buttonTemplate\n    } = options;\n    // target every <pre> elements\n    const preElements = element.querySelectorAll('pre');\n    for (let i = 0; i < preElements.length; i++) {\n      const preElement = preElements.item(i);\n      // create <pre> wrapper element\n      const preWrapperElement = document.createElement('div');\n      preWrapperElement.style.position = 'relative';\n      preElement.parentNode.insertBefore(preWrapperElement, preElement);\n      preWrapperElement.appendChild(preElement);\n      // create toolbar element\n      const toolbarWrapperElement = document.createElement('div');\n      toolbarWrapperElement.style.position = 'absolute';\n      toolbarWrapperElement.style.top = '.5em';\n      toolbarWrapperElement.style.right = '.5em';\n      toolbarWrapperElement.style.opacity = '0';\n      toolbarWrapperElement.style.transition = 'opacity 250ms ease-out';\n      toolbarWrapperElement.style.zIndex = '1';\n      preWrapperElement.insertAdjacentElement('beforeend', toolbarWrapperElement);\n      // register listener to show/hide toolbar\n      preElement.onmouseover = () => toolbarWrapperElement.style.opacity = '1';\n      preElement.onmouseout = () => toolbarWrapperElement.style.opacity = '0';\n      // declare embeddedViewRef holding variable\n      let embeddedViewRef;\n      // use provided component via input property\n      // or provided via ClipboardOptions provider\n      if (buttonComponent) {\n        const componentRef = viewContainerRef.createComponent(buttonComponent);\n        embeddedViewRef = componentRef.hostView;\n        componentRef.changeDetectorRef.markForCheck();\n      }\n      // use provided template via input property\n      else if (buttonTemplate) {\n        embeddedViewRef = viewContainerRef.createEmbeddedView(buttonTemplate);\n      }\n      // use default component\n      else {\n        const componentRef = viewContainerRef.createComponent(ClipboardButtonComponent);\n        embeddedViewRef = componentRef.hostView;\n        componentRef.changeDetectorRef.markForCheck();\n      }\n      // declare clipboard instance variable\n      let clipboardInstance;\n      // attach clipboard.js to root node\n      embeddedViewRef.rootNodes.forEach(node => {\n        node.onmouseover = () => toolbarWrapperElement.style.opacity = '1';\n        toolbarWrapperElement.appendChild(node);\n        clipboardInstance = new ClipboardJS(node, {\n          text: () => preElement.innerText\n        });\n      });\n      // destroy clipboard instance when view is destroyed\n      embeddedViewRef.onDestroy(() => clipboardInstance.destroy());\n    }\n  }\n  renderMermaid(element, options = this.DEFAULT_MERMAID_OPTIONS) {\n    if (!isPlatformBrowser(this.platform)) {\n      return;\n    }\n    if (typeof mermaid === 'undefined' || typeof mermaid.initialize === 'undefined') {\n      throw new Error(errorMermaidNotLoaded);\n    }\n    const mermaidElements = element.querySelectorAll('.mermaid');\n    if (mermaidElements.length === 0) {\n      return;\n    }\n    mermaid.initialize(options);\n    mermaid.run({\n      nodes: mermaidElements\n    });\n  }\n  trimIndentation(markdown) {\n    if (!markdown) {\n      return '';\n    }\n    let indentStart;\n    return markdown.split('\\n').map(line => {\n      let lineIdentStart = indentStart;\n      if (line.length > 0) {\n        lineIdentStart = isNaN(lineIdentStart) ? line.search(/\\S|$/) : Math.min(line.search(/\\S|$/), lineIdentStart);\n      }\n      if (isNaN(indentStart)) {\n        indentStart = lineIdentStart;\n      }\n      return lineIdentStart ? line.substring(lineIdentStart) : line;\n    }).join('\\n');\n  }\n  static #_ = this.ɵfac = function MarkdownService_Factory(t) {\n    return new (t || MarkdownService)(i0.ɵɵinject(CLIPBOARD_OPTIONS, 8), i0.ɵɵinject(MARKED_EXTENSIONS, 8), i0.ɵɵinject(MARKED_OPTIONS, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(SECURITY_CONTEXT), i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DomSanitizer));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MarkdownService,\n    factory: MarkdownService.ɵfac\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownService, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CLIPBOARD_OPTIONS]\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MARKED_EXTENSIONS]\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MARKED_OPTIONS]\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.SecurityContext,\n    decorators: [{\n      type: Inject,\n      args: [SECURITY_CONTEXT]\n    }]\n  }, {\n    type: i1.HttpClient,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: i2.DomSanitizer\n  }], null);\n})();\nclass MarkdownComponent {\n  get disableSanitizer() {\n    return this._disableSanitizer;\n  }\n  set disableSanitizer(value) {\n    this._disableSanitizer = this.coerceBooleanProperty(value);\n  }\n  get inline() {\n    return this._inline;\n  }\n  set inline(value) {\n    this._inline = this.coerceBooleanProperty(value);\n  }\n  // Plugin - clipboard\n  get clipboard() {\n    return this._clipboard;\n  }\n  set clipboard(value) {\n    this._clipboard = this.coerceBooleanProperty(value);\n  }\n  // Plugin - emoji\n  get emoji() {\n    return this._emoji;\n  }\n  set emoji(value) {\n    this._emoji = this.coerceBooleanProperty(value);\n  }\n  // Plugin - katex\n  get katex() {\n    return this._katex;\n  }\n  set katex(value) {\n    this._katex = this.coerceBooleanProperty(value);\n  }\n  // Plugin - mermaid\n  get mermaid() {\n    return this._mermaid;\n  }\n  set mermaid(value) {\n    this._mermaid = this.coerceBooleanProperty(value);\n  }\n  // Plugin - lineHighlight\n  get lineHighlight() {\n    return this._lineHighlight;\n  }\n  set lineHighlight(value) {\n    this._lineHighlight = this.coerceBooleanProperty(value);\n  }\n  // Plugin - lineNumbers\n  get lineNumbers() {\n    return this._lineNumbers;\n  }\n  set lineNumbers(value) {\n    this._lineNumbers = this.coerceBooleanProperty(value);\n  }\n  // Plugin - commandLine\n  get commandLine() {\n    return this._commandLine;\n  }\n  set commandLine(value) {\n    this._commandLine = this.coerceBooleanProperty(value);\n  }\n  constructor(element, markdownService, viewContainerRef) {\n    this.element = element;\n    this.markdownService = markdownService;\n    this.viewContainerRef = viewContainerRef;\n    // Event emitters\n    this.error = new EventEmitter();\n    this.load = new EventEmitter();\n    this.ready = new EventEmitter();\n    this._clipboard = false;\n    this._commandLine = false;\n    this._disableSanitizer = false;\n    this._emoji = false;\n    this._inline = false;\n    this._katex = false;\n    this._lineHighlight = false;\n    this._lineNumbers = false;\n    this._mermaid = false;\n    this.destroyed$ = new Subject();\n  }\n  ngOnChanges() {\n    this.loadContent();\n  }\n  loadContent() {\n    if (this.data != null) {\n      this.handleData();\n      return;\n    }\n    if (this.src != null) {\n      this.handleSrc();\n      return;\n    }\n  }\n  ngAfterViewInit() {\n    if (!this.data && !this.src) {\n      this.handleTransclusion();\n    }\n    this.markdownService.reload$.pipe(takeUntil(this.destroyed$)).subscribe(() => this.loadContent());\n  }\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n  render(markdown, decodeHtml = false) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const parsedOptions = {\n        decodeHtml,\n        inline: _this.inline,\n        emoji: _this.emoji,\n        mermaid: _this.mermaid,\n        disableSanitizer: _this.disableSanitizer\n      };\n      const renderOptions = {\n        clipboard: _this.clipboard,\n        clipboardOptions: {\n          buttonComponent: _this.clipboardButtonComponent,\n          buttonTemplate: _this.clipboardButtonTemplate\n        },\n        katex: _this.katex,\n        katexOptions: _this.katexOptions,\n        mermaid: _this.mermaid,\n        mermaidOptions: _this.mermaidOptions\n      };\n      const parsed = yield _this.markdownService.parse(markdown, parsedOptions);\n      _this.element.nativeElement.innerHTML = parsed;\n      _this.handlePlugins();\n      _this.markdownService.render(_this.element.nativeElement, renderOptions, _this.viewContainerRef);\n      _this.ready.emit();\n    })();\n  }\n  coerceBooleanProperty(value) {\n    return value != null && `${String(value)}` !== 'false';\n  }\n  handleData() {\n    this.render(this.data);\n  }\n  handleSrc() {\n    this.markdownService.getSource(this.src).subscribe({\n      next: markdown => {\n        this.render(markdown).then(() => {\n          this.load.emit(markdown);\n        });\n      },\n      error: error => this.error.emit(error)\n    });\n  }\n  handleTransclusion() {\n    this.render(this.element.nativeElement.innerHTML, true);\n  }\n  handlePlugins() {\n    if (this.commandLine) {\n      this.setPluginClass(this.element.nativeElement, PrismPlugin.CommandLine);\n      this.setPluginOptions(this.element.nativeElement, {\n        dataFilterOutput: this.filterOutput,\n        dataHost: this.host,\n        dataPrompt: this.prompt,\n        dataOutput: this.output,\n        dataUser: this.user\n      });\n    }\n    if (this.lineHighlight) {\n      this.setPluginOptions(this.element.nativeElement, {\n        dataLine: this.line,\n        dataLineOffset: this.lineOffset\n      });\n    }\n    if (this.lineNumbers) {\n      this.setPluginClass(this.element.nativeElement, PrismPlugin.LineNumbers);\n      this.setPluginOptions(this.element.nativeElement, {\n        dataStart: this.start\n      });\n    }\n  }\n  setPluginClass(element, plugin) {\n    const preElements = element.querySelectorAll('pre');\n    for (let i = 0; i < preElements.length; i++) {\n      const classes = plugin instanceof Array ? plugin : [plugin];\n      preElements.item(i).classList.add(...classes);\n    }\n  }\n  setPluginOptions(element, options) {\n    const preElements = element.querySelectorAll('pre');\n    for (let i = 0; i < preElements.length; i++) {\n      Object.keys(options).forEach(option => {\n        const attributeValue = options[option];\n        if (attributeValue) {\n          const attributeName = this.toLispCase(option);\n          preElements.item(i).setAttribute(attributeName, attributeValue.toString());\n        }\n      });\n    }\n  }\n  toLispCase(value) {\n    const upperChars = value.match(/([A-Z])/g);\n    if (!upperChars) {\n      return value;\n    }\n    let str = value.toString();\n    for (let i = 0, n = upperChars.length; i < n; i++) {\n      str = str.replace(new RegExp(upperChars[i]), '-' + upperChars[i].toLowerCase());\n    }\n    if (str.slice(0, 1) === '-') {\n      str = str.slice(1);\n    }\n    return str;\n  }\n  static #_ = this.ɵfac = function MarkdownComponent_Factory(t) {\n    return new (t || MarkdownComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MarkdownService), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MarkdownComponent,\n    selectors: [[\"markdown\"], [\"\", \"markdown\", \"\"]],\n    inputs: {\n      data: \"data\",\n      src: \"src\",\n      disableSanitizer: \"disableSanitizer\",\n      inline: \"inline\",\n      clipboard: \"clipboard\",\n      clipboardButtonComponent: \"clipboardButtonComponent\",\n      clipboardButtonTemplate: \"clipboardButtonTemplate\",\n      emoji: \"emoji\",\n      katex: \"katex\",\n      katexOptions: \"katexOptions\",\n      mermaid: \"mermaid\",\n      mermaidOptions: \"mermaidOptions\",\n      lineHighlight: \"lineHighlight\",\n      line: \"line\",\n      lineOffset: \"lineOffset\",\n      lineNumbers: \"lineNumbers\",\n      start: \"start\",\n      commandLine: \"commandLine\",\n      filterOutput: \"filterOutput\",\n      host: \"host\",\n      prompt: \"prompt\",\n      output: \"output\",\n      user: \"user\"\n    },\n    outputs: {\n      error: \"error\",\n      load: \"load\",\n      ready: \"ready\"\n    },\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MarkdownComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownComponent, [{\n    type: Component,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/component-selector\n      selector: 'markdown, [markdown]',\n      template: '<ng-content></ng-content>',\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: MarkdownService\n  }, {\n    type: i0.ViewContainerRef\n  }], {\n    data: [{\n      type: Input\n    }],\n    src: [{\n      type: Input\n    }],\n    disableSanitizer: [{\n      type: Input\n    }],\n    inline: [{\n      type: Input\n    }],\n    clipboard: [{\n      type: Input\n    }],\n    clipboardButtonComponent: [{\n      type: Input\n    }],\n    clipboardButtonTemplate: [{\n      type: Input\n    }],\n    emoji: [{\n      type: Input\n    }],\n    katex: [{\n      type: Input\n    }],\n    katexOptions: [{\n      type: Input\n    }],\n    mermaid: [{\n      type: Input\n    }],\n    mermaidOptions: [{\n      type: Input\n    }],\n    lineHighlight: [{\n      type: Input\n    }],\n    line: [{\n      type: Input\n    }],\n    lineOffset: [{\n      type: Input\n    }],\n    lineNumbers: [{\n      type: Input\n    }],\n    start: [{\n      type: Input\n    }],\n    commandLine: [{\n      type: Input\n    }],\n    filterOutput: [{\n      type: Input\n    }],\n    host: [{\n      type: Input\n    }],\n    prompt: [{\n      type: Input\n    }],\n    output: [{\n      type: Input\n    }],\n    user: [{\n      type: Input\n    }],\n    error: [{\n      type: Output\n    }],\n    load: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }]\n  });\n})();\nclass MarkdownPipe {\n  constructor(domSanitizer, elementRef, markdownService, viewContainerRef, zone) {\n    this.domSanitizer = domSanitizer;\n    this.elementRef = elementRef;\n    this.markdownService = markdownService;\n    this.viewContainerRef = viewContainerRef;\n    this.zone = zone;\n  }\n  transform(value, options) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (value == null) {\n        return '';\n      }\n      if (typeof value !== 'string') {\n        console.error(`MarkdownPipe has been invoked with an invalid value type [${typeof value}]`);\n        return value;\n      }\n      const markdown = yield _this2.markdownService.parse(value, options);\n      _this2.zone.onStable.pipe(first()).subscribe(() => _this2.markdownService.render(_this2.elementRef.nativeElement, options, _this2.viewContainerRef));\n      return _this2.domSanitizer.bypassSecurityTrustHtml(markdown);\n    })();\n  }\n  static #_ = this.ɵfac = function MarkdownPipe_Factory(t) {\n    return new (t || MarkdownPipe)(i0.ɵɵdirectiveInject(i2.DomSanitizer, 16), i0.ɵɵdirectiveInject(i0.ElementRef, 16), i0.ɵɵdirectiveInject(MarkdownService, 16), i0.ɵɵdirectiveInject(i0.ViewContainerRef, 16), i0.ɵɵdirectiveInject(i0.NgZone, 16));\n  };\n  static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"markdown\",\n    type: MarkdownPipe,\n    pure: true,\n    standalone: true\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'markdown',\n      standalone: true\n    }]\n  }], () => [{\n    type: i2.DomSanitizer\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: MarkdownService\n  }, {\n    type: i0.ViewContainerRef\n  }, {\n    type: i0.NgZone\n  }], null);\n})();\nfunction provideMarkdown(markdownModuleConfig) {\n  return [MarkdownService, markdownModuleConfig?.loader ?? [], markdownModuleConfig?.clipboardOptions ?? [], markdownModuleConfig?.markedOptions ?? [], {\n    provide: MARKED_EXTENSIONS,\n    useValue: markdownModuleConfig?.markedExtensions ?? []\n  }, {\n    provide: SECURITY_CONTEXT,\n    useValue: markdownModuleConfig?.sanitize ?? SecurityContext.HTML\n  }];\n}\nconst sharedDeclarations = [ClipboardButtonComponent, LanguagePipe, MarkdownComponent, MarkdownPipe];\nclass MarkdownModule {\n  static forRoot(markdownModuleConfig) {\n    return {\n      ngModule: MarkdownModule,\n      providers: [provideMarkdown(markdownModuleConfig)]\n    };\n  }\n  static forChild() {\n    return {\n      ngModule: MarkdownModule\n    };\n  }\n  static #_ = this.ɵfac = function MarkdownModule_Factory(t) {\n    return new (t || MarkdownModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MarkdownModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ...sharedDeclarations],\n      exports: sharedDeclarations\n    }]\n  }], null, null);\n})();\n\n/* eslint-disable */\nvar MermaidAPI;\n(function (MermaidAPI) {\n  let SecurityLevel;\n  (function (SecurityLevel) {\n    /**\n     * (default) tags in text are encoded, click functionality is disabled\n     */\n    SecurityLevel[\"Strict\"] = \"strict\";\n    /**\n     * tags in text are allowed, click functionality is enabled\n     */\n    SecurityLevel[\"Loose\"] = \"loose\";\n    /**\n     * html tags in text are allowed, (only script element is removed), click functionality is enabled\n     */\n    SecurityLevel[\"Antiscript\"] = \"antiscript\";\n    /**\n     * with this security level all rendering takes place in a sandboxed iframe.\n     * This prevent any javascript running in the context.\n     * This may hinder interactive functionality of the diagram like scripts,\n     * popups in sequence diagram or links to other tabs/targets etc.\n     */\n    SecurityLevel[\"Sandbox\"] = \"sandbox\";\n  })(SecurityLevel = MermaidAPI.SecurityLevel || (MermaidAPI.SecurityLevel = {}));\n  let Theme;\n  (function (Theme) {\n    /**\n     * Designed to modified, as the name implies it is supposed to be used as the base for making custom themes.\n     */\n    Theme[\"Base\"] = \"base\";\n    /**\n     * A theme full of light greens that is easy on the eyes.\n     */\n    Theme[\"Forest\"] = \"forest\";\n    /**\n     * A theme that would go well with other dark colored elements.\n     */\n    Theme[\"Dark\"] = \"dark\";\n    /**\n     *  The default theme for all diagrams.\n     */\n    Theme[\"Default\"] = \"default\";\n    /**\n     * The theme to be used for black and white printing\n     */\n    Theme[\"Neutral\"] = \"neutral\";\n  })(Theme = MermaidAPI.Theme || (MermaidAPI.Theme = {}));\n  let LogLevel;\n  (function (LogLevel) {\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n    LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n  })(LogLevel = MermaidAPI.LogLevel || (MermaidAPI.LogLevel = {}));\n})(MermaidAPI || (MermaidAPI = {}));\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CLIPBOARD_OPTIONS, ClipboardButtonComponent, ExtendedRenderer, KatexSpecificOptions, LanguagePipe, MARKED_EXTENSIONS, MARKED_OPTIONS, MarkdownComponent, MarkdownModule, MarkdownPipe, MarkdownService, MermaidAPI, PrismPlugin, SECURITY_CONTEXT, errorClipboardNotLoaded, errorClipboardViewContainerRequired, errorJoyPixelsNotLoaded, errorKatexNotLoaded, errorMermaidNotLoaded, errorSrcWithoutHttpClient, provideMarkdown };","map":{"version":3,"names":["AsyncPipe","isPlatformBrowser","CommonModule","i0","Component","ChangeDetectionStrategy","InjectionToken","Pipe","PLATFORM_ID","Injectable","Inject","Optional","EventEmitter","Input","Output","SecurityContext","NgModule","Subject","of","timer","merge","mapTo","switchMap","distinctUntilChanged","shareReplay","startWith","map","takeUntil","first","Renderer","marked","MarkedRenderer","i1","i2","_c0","BUTTON_TEXT_COPY","BUTTON_TEXT_COPIED","ClipboardButtonComponent","constructor","_buttonClick$","copied$","pipe","copiedText$","copied","onCopyToClipboardClick","next","_","ɵfac","ClipboardButtonComponent_Factory","t","_2","ɵcmp","ɵɵdefineComponent","type","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ClipboardButtonComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ClipboardButtonComponent_Template_button_click_0_listener","ɵɵpipe","ɵɵtext","ɵɵelementEnd","ɵɵclassProp","ɵɵpipeBind1","ɵɵadvance","ɵɵtextInterpolate","dependencies","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","OnPush","imports","CLIPBOARD_OPTIONS","KatexSpecificOptions","LanguagePipe","transform","value","language","console","error","LanguagePipe_Factory","ɵpipe","ɵɵdefinePipe","name","pure","PrismPlugin","MARKED_EXTENSIONS","MARKED_OPTIONS","errorJoyPixelsNotLoaded","errorKatexNotLoaded","errorMermaidNotLoaded","errorClipboardNotLoaded","errorClipboardViewContainerRequired","errorSrcWithoutHttpClient","SECURITY_CONTEXT","ExtendedRenderer","arguments","ɵNgxMarkdownRendererExtendedForExtensions","ɵNgxMarkdownRendererExtendedForMermaid","MarkdownService","options","_options","DEFAULT_MARKED_OPTIONS","renderer","clipboardOptions","extensions","platform","securityContext","http","sanitizer","DEFAULT_KATEX_OPTIONS","delimiters","left","right","display","DEFAULT_MERMAID_OPTIONS","startOnLoad","DEFAULT_CLIPBOARD_OPTIONS","buttonComponent","undefined","DEFAULT_PARSE_OPTIONS","decodeHtml","inline","emoji","mermaid","markedOptions","disableSanitizer","DEFAULT_RENDER_OPTIONS","clipboard","katex","katexOptions","mermaidOptions","_reload$","reload$","asObservable","parse","markdown","parseOptions","extendsRendererForExtensions","extendsRendererForMermaid","trimmed","trimIndentation","decoded","emojified","parseEmoji","parseMarked","sanitized","sanitize","render","element","viewContainerRef","renderKatex","renderMermaid","renderClipboard","highlight","reload","getSource","src","Error","get","responseType","handleExtension","Prism","highlightAllUnder","document","noLanguageElements","querySelectorAll","Array","prototype","forEach","call","x","classList","add","html","textarea","createElement","innerHTML","extendedRenderer","length","use","defaultCode","code","isEscaped","urlProtocolIndex","lastIndexOf","urlWithoutProtocol","substring","lastSlashIndex","lastUrlSegment","split","lastDotIndex","extension","parseInline","joypixels","shortnameToUnicode","renderMathInElement","ClipboardJS","buttonTemplate","preElements","i","preElement","item","preWrapperElement","style","position","parentNode","insertBefore","appendChild","toolbarWrapperElement","top","opacity","transition","zIndex","insertAdjacentElement","onmouseover","onmouseout","embeddedViewRef","componentRef","createComponent","hostView","changeDetectorRef","markForCheck","createEmbeddedView","clipboardInstance","rootNodes","node","text","innerText","onDestroy","destroy","initialize","mermaidElements","run","nodes","indentStart","line","lineIdentStart","isNaN","search","Math","min","join","MarkdownService_Factory","ɵɵinject","HttpClient","DomSanitizer","ɵprov","ɵɵdefineInjectable","token","factory","decorators","Object","MarkdownComponent","_disableSanitizer","coerceBooleanProperty","_inline","_clipboard","_emoji","_katex","_mermaid","lineHighlight","_lineHighlight","lineNumbers","_lineNumbers","commandLine","_commandLine","markdownService","load","ready","destroyed$","ngOnChanges","loadContent","data","handleData","handleSrc","ngAfterViewInit","handleTransclusion","subscribe","ngOnDestroy","complete","_this","_asyncToGenerator","parsedOptions","renderOptions","clipboardButtonComponent","clipboardButtonTemplate","parsed","nativeElement","handlePlugins","emit","String","then","setPluginClass","CommandLine","setPluginOptions","dataFilterOutput","filterOutput","dataHost","host","dataPrompt","prompt","dataOutput","output","dataUser","user","dataLine","dataLineOffset","lineOffset","LineNumbers","dataStart","start","plugin","classes","keys","option","attributeValue","attributeName","toLispCase","setAttribute","toString","upperChars","match","str","n","replace","RegExp","toLowerCase","slice","MarkdownComponent_Factory","ɵɵdirectiveInject","ElementRef","ViewContainerRef","inputs","outputs","ɵɵNgOnChangesFeature","ngContentSelectors","MarkdownComponent_Template","ɵɵprojectionDef","ɵɵprojection","MarkdownPipe","domSanitizer","elementRef","zone","_this2","onStable","bypassSecurityTrustHtml","MarkdownPipe_Factory","NgZone","provideMarkdown","markdownModuleConfig","loader","provide","useValue","markedExtensions","HTML","sharedDeclarations","MarkdownModule","forRoot","ngModule","providers","forChild","MarkdownModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","exports","MermaidAPI","SecurityLevel","Theme","LogLevel"],"sources":["/Users/obakengtaphane/Desktop/Projects/blogTech/UI/blogtech/node_modules/ngx-markdown/fesm2022/ngx-markdown.mjs"],"sourcesContent":["import { AsyncPipe, isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, InjectionToken, Pipe, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Input, Output, SecurityContext, NgModule } from '@angular/core';\nimport { Subject, of, timer, merge } from 'rxjs';\nimport { mapTo, switchMap, distinctUntilChanged, shareReplay, startWith, map, takeUntil, first } from 'rxjs/operators';\nimport { Renderer, marked } from 'marked';\nexport { Renderer as MarkedRenderer } from 'marked';\nimport * as i1 from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\n\nconst BUTTON_TEXT_COPY = 'Copy';\nconst BUTTON_TEXT_COPIED = 'Copied';\nclass ClipboardButtonComponent {\n    constructor() {\n        this._buttonClick$ = new Subject();\n        this.copied$ = this._buttonClick$.pipe(switchMap(() => merge(of(true), timer(3000).pipe(mapTo(false)))), distinctUntilChanged(), shareReplay(1));\n        this.copiedText$ = this.copied$.pipe(startWith(false), map(copied => copied\n            ? BUTTON_TEXT_COPIED\n            : BUTTON_TEXT_COPY));\n    }\n    onCopyToClipboardClick() {\n        this._buttonClick$.next();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: ClipboardButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.0\", type: ClipboardButtonComponent, isStandalone: true, selector: \"markdown-clipboard\", ngImport: i0, template: `\r\n    <button\r\n      class=\"markdown-clipboard-button\"\r\n      [class.copied]=\"copied$ | async\"\r\n      (click)=\"onCopyToClipboardClick()\"\r\n    >{{ copiedText$ | async }}</button>\r\n  `, isInline: true, dependencies: [{ kind: \"pipe\", type: AsyncPipe, name: \"async\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: ClipboardButtonComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'markdown-clipboard',\n                    template: `\r\n    <button\r\n      class=\"markdown-clipboard-button\"\r\n      [class.copied]=\"copied$ | async\"\r\n      (click)=\"onCopyToClipboardClick()\"\r\n    >{{ copiedText$ | async }}</button>\r\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    standalone: true,\n                    imports: [AsyncPipe],\n                }]\n        }] });\n\nconst CLIPBOARD_OPTIONS = new InjectionToken('CLIPBOARD_OPTIONS');\n\n/* eslint-disable */\nclass KatexSpecificOptions {\n}\n\nclass LanguagePipe {\n    transform(value, language) {\n        if (value == null) {\n            value = '';\n        }\n        if (language == null) {\n            language = '';\n        }\n        if (typeof value !== 'string') {\n            console.error(`LanguagePipe has been invoked with an invalid value type [${typeof value}]`);\n            return value;\n        }\n        if (typeof language !== 'string') {\n            console.error(`LanguagePipe has been invoked with an invalid parameter [${typeof language}]`);\n            return value;\n        }\n        return '```' + language + '\\n' + value + '\\n```';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: LanguagePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"17.0.0\", ngImport: i0, type: LanguagePipe, isStandalone: true, name: \"language\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: LanguagePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'language',\n                    standalone: true,\n                }]\n        }] });\n\nvar PrismPlugin;\n(function (PrismPlugin) {\n    PrismPlugin[\"CommandLine\"] = \"command-line\";\n    PrismPlugin[\"LineHighlight\"] = \"line-highlight\";\n    PrismPlugin[\"LineNumbers\"] = \"line-numbers\";\n})(PrismPlugin || (PrismPlugin = {}));\n\nconst MARKED_EXTENSIONS = new InjectionToken('MARKED_EXTENSIONS');\n\nconst MARKED_OPTIONS = new InjectionToken('MARKED_OPTIONS');\n\n/* eslint-disable max-len */\nconst errorJoyPixelsNotLoaded = '[ngx-markdown] When using the `emoji` attribute you *have to* include Emoji-Toolkit files to `angular.json` or use imports. See README for more information';\nconst errorKatexNotLoaded = '[ngx-markdown] When using the `katex` attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information';\nconst errorMermaidNotLoaded = '[ngx-markdown] When using the `mermaid` attribute you *have to* include Mermaid files to `angular.json` or use imports. See README for more information';\nconst errorClipboardNotLoaded = '[ngx-markdown] When using the `clipboard` attribute you *have to* include Clipboard files to `angular.json` or use imports. See README for more information';\nconst errorClipboardViewContainerRequired = '[ngx-markdown] When using the `clipboard` attribute you *have to* provide the `viewContainerRef` parameter to `MarkdownService.render()` function';\nconst errorSrcWithoutHttpClient = '[ngx-markdown] When using the `src` attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information';\n/* eslint-enable max-len */\nconst SECURITY_CONTEXT = new InjectionToken('SECURITY_CONTEXT');\nclass ExtendedRenderer extends Renderer {\n    constructor() {\n        super(...arguments);\n        this.ɵNgxMarkdownRendererExtendedForExtensions = false;\n        this.ɵNgxMarkdownRendererExtendedForMermaid = false;\n    }\n}\nclass MarkdownService {\n    get options() { return this._options; }\n    set options(value) {\n        this._options = { ...this.DEFAULT_MARKED_OPTIONS, ...value };\n    }\n    get renderer() { return this.options.renderer; }\n    set renderer(value) {\n        this.options.renderer = value;\n    }\n    constructor(clipboardOptions, extensions, options, platform, securityContext, http, sanitizer) {\n        this.clipboardOptions = clipboardOptions;\n        this.extensions = extensions;\n        this.platform = platform;\n        this.securityContext = securityContext;\n        this.http = http;\n        this.sanitizer = sanitizer;\n        this.DEFAULT_MARKED_OPTIONS = {\n            renderer: new Renderer(),\n        };\n        this.DEFAULT_KATEX_OPTIONS = {\n            delimiters: [\n                { left: '$$', right: '$$', display: true },\n                { left: '$', right: '$', display: false },\n                { left: '\\\\(', right: '\\\\)', display: false },\n                { left: '\\\\begin{equation}', right: '\\\\end{equation}', display: true },\n                { left: '\\\\begin{align}', right: '\\\\end{align}', display: true },\n                { left: '\\\\begin{alignat}', right: '\\\\end{alignat}', display: true },\n                { left: '\\\\begin{gather}', right: '\\\\end{gather}', display: true },\n                { left: '\\\\begin{CD}', right: '\\\\end{CD}', display: true },\n                { left: '\\\\[', right: '\\\\]', display: true },\n            ],\n        };\n        this.DEFAULT_MERMAID_OPTIONS = {\n            startOnLoad: false,\n        };\n        this.DEFAULT_CLIPBOARD_OPTIONS = {\n            buttonComponent: undefined,\n        };\n        this.DEFAULT_PARSE_OPTIONS = {\n            decodeHtml: false,\n            inline: false,\n            emoji: false,\n            mermaid: false,\n            markedOptions: undefined,\n            disableSanitizer: false,\n        };\n        this.DEFAULT_RENDER_OPTIONS = {\n            clipboard: false,\n            clipboardOptions: undefined,\n            katex: false,\n            katexOptions: undefined,\n            mermaid: false,\n            mermaidOptions: undefined,\n        };\n        this._reload$ = new Subject();\n        this.reload$ = this._reload$.asObservable();\n        this.options = options;\n    }\n    parse(markdown, parseOptions = this.DEFAULT_PARSE_OPTIONS) {\n        const { decodeHtml, inline, emoji, mermaid, disableSanitizer, } = parseOptions;\n        const markedOptions = {\n            ...this.options,\n            ...parseOptions.markedOptions,\n        };\n        const renderer = markedOptions.renderer || this.renderer || new Renderer();\n        if (this.extensions) {\n            this.renderer = this.extendsRendererForExtensions(renderer);\n        }\n        if (mermaid) {\n            this.renderer = this.extendsRendererForMermaid(renderer);\n        }\n        const trimmed = this.trimIndentation(markdown);\n        const decoded = decodeHtml ? this.decodeHtml(trimmed) : trimmed;\n        const emojified = emoji ? this.parseEmoji(decoded) : decoded;\n        const marked = this.parseMarked(emojified, markedOptions, inline);\n        const sanitized = disableSanitizer ? marked : this.sanitizer.sanitize(this.securityContext, marked);\n        return sanitized || '';\n    }\n    render(element, options = this.DEFAULT_RENDER_OPTIONS, viewContainerRef) {\n        const { clipboard, clipboardOptions, katex, katexOptions, mermaid, mermaidOptions, } = options;\n        if (katex) {\n            this.renderKatex(element, {\n                ...this.DEFAULT_KATEX_OPTIONS,\n                ...katexOptions,\n            });\n        }\n        if (mermaid) {\n            this.renderMermaid(element, {\n                ...this.DEFAULT_MERMAID_OPTIONS,\n                ...mermaidOptions,\n            });\n        }\n        if (clipboard) {\n            this.renderClipboard(element, viewContainerRef, {\n                ...this.DEFAULT_CLIPBOARD_OPTIONS,\n                ...this.clipboardOptions,\n                ...clipboardOptions,\n            });\n        }\n        this.highlight(element);\n    }\n    reload() {\n        this._reload$.next();\n    }\n    getSource(src) {\n        if (!this.http) {\n            throw new Error(errorSrcWithoutHttpClient);\n        }\n        return this.http\n            .get(src, { responseType: 'text' })\n            .pipe(map(markdown => this.handleExtension(src, markdown)));\n    }\n    highlight(element) {\n        if (!isPlatformBrowser(this.platform)) {\n            return;\n        }\n        if (typeof Prism === 'undefined' || typeof Prism.highlightAllUnder === 'undefined') {\n            return;\n        }\n        if (!element) {\n            element = document;\n        }\n        const noLanguageElements = element.querySelectorAll('pre code:not([class*=\"language-\"])');\n        Array.prototype.forEach.call(noLanguageElements, (x) => x.classList.add('language-none'));\n        Prism.highlightAllUnder(element);\n    }\n    decodeHtml(html) {\n        if (!isPlatformBrowser(this.platform)) {\n            return html;\n        }\n        const textarea = document.createElement('textarea');\n        textarea.innerHTML = html;\n        return textarea.value;\n    }\n    extendsRendererForExtensions(renderer) {\n        const extendedRenderer = renderer;\n        if (extendedRenderer.ɵNgxMarkdownRendererExtendedForExtensions === true) {\n            return renderer;\n        }\n        if (this.extensions?.length > 0) {\n            marked.use(...this.extensions);\n        }\n        extendedRenderer.ɵNgxMarkdownRendererExtendedForExtensions = true;\n        return renderer;\n    }\n    extendsRendererForMermaid(renderer) {\n        const extendedRenderer = renderer;\n        if (extendedRenderer.ɵNgxMarkdownRendererExtendedForMermaid === true) {\n            return renderer;\n        }\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        const defaultCode = renderer.code;\n        renderer.code = function (code, language, isEscaped) {\n            return language === 'mermaid'\n                ? `<div class=\"mermaid\">${code}</div>`\n                : defaultCode.call(this, code, language, isEscaped);\n        };\n        extendedRenderer.ɵNgxMarkdownRendererExtendedForMermaid = true;\n        return renderer;\n    }\n    handleExtension(src, markdown) {\n        const urlProtocolIndex = src.lastIndexOf('://');\n        const urlWithoutProtocol = urlProtocolIndex > -1\n            ? src.substring(urlProtocolIndex + 4)\n            : src;\n        const lastSlashIndex = urlWithoutProtocol.lastIndexOf('/');\n        const lastUrlSegment = lastSlashIndex > -1\n            ? urlWithoutProtocol.substring(lastSlashIndex + 1).split('?')[0]\n            : '';\n        const lastDotIndex = lastUrlSegment.lastIndexOf('.');\n        const extension = lastDotIndex > -1\n            ? lastUrlSegment.substring(lastDotIndex + 1)\n            : '';\n        return !!extension && extension !== 'md'\n            ? '```' + extension + '\\n' + markdown + '\\n```'\n            : markdown;\n    }\n    parseMarked(html, markedOptions, inline = false) {\n        if (markedOptions.renderer) {\n            // clone renderer and remove extended flags otherwise\n            // marked throws an error thinking it is a renderer prop\n            const renderer = { ...markedOptions.renderer };\n            delete renderer.ɵNgxMarkdownRendererExtendedForExtensions;\n            delete renderer.ɵNgxMarkdownRendererExtendedForMermaid;\n            // remove renderer from markedOptions because if renderer is\n            // passed to marked.parse method, it will ignore all extensions\n            delete markedOptions.renderer;\n            marked.use({ renderer });\n        }\n        return inline\n            ? marked.parseInline(html, markedOptions)\n            : marked.parse(html, markedOptions);\n    }\n    parseEmoji(html) {\n        if (!isPlatformBrowser(this.platform)) {\n            return html;\n        }\n        if (typeof joypixels === 'undefined' || typeof joypixels.shortnameToUnicode === 'undefined') {\n            throw new Error(errorJoyPixelsNotLoaded);\n        }\n        return joypixels.shortnameToUnicode(html);\n    }\n    renderKatex(element, options) {\n        if (!isPlatformBrowser(this.platform)) {\n            return;\n        }\n        if (typeof katex === 'undefined' || typeof renderMathInElement === 'undefined') {\n            throw new Error(errorKatexNotLoaded);\n        }\n        renderMathInElement(element, options);\n    }\n    renderClipboard(element, viewContainerRef, options) {\n        if (!isPlatformBrowser(this.platform)) {\n            return;\n        }\n        if (typeof ClipboardJS === 'undefined') {\n            throw new Error(errorClipboardNotLoaded);\n        }\n        if (!viewContainerRef) {\n            throw new Error(errorClipboardViewContainerRequired);\n        }\n        const { buttonComponent, buttonTemplate, } = options;\n        // target every <pre> elements\n        const preElements = element.querySelectorAll('pre');\n        for (let i = 0; i < preElements.length; i++) {\n            const preElement = preElements.item(i);\n            // create <pre> wrapper element\n            const preWrapperElement = document.createElement('div');\n            preWrapperElement.style.position = 'relative';\n            preElement.parentNode.insertBefore(preWrapperElement, preElement);\n            preWrapperElement.appendChild(preElement);\n            // create toolbar element\n            const toolbarWrapperElement = document.createElement('div');\n            toolbarWrapperElement.style.position = 'absolute';\n            toolbarWrapperElement.style.top = '.5em';\n            toolbarWrapperElement.style.right = '.5em';\n            toolbarWrapperElement.style.opacity = '0';\n            toolbarWrapperElement.style.transition = 'opacity 250ms ease-out';\n            toolbarWrapperElement.style.zIndex = '1';\n            preWrapperElement.insertAdjacentElement('beforeend', toolbarWrapperElement);\n            // register listener to show/hide toolbar\n            preElement.onmouseover = () => toolbarWrapperElement.style.opacity = '1';\n            preElement.onmouseout = () => toolbarWrapperElement.style.opacity = '0';\n            // declare embeddedViewRef holding variable\n            let embeddedViewRef;\n            // use provided component via input property\n            // or provided via ClipboardOptions provider\n            if (buttonComponent) {\n                const componentRef = viewContainerRef.createComponent(buttonComponent);\n                embeddedViewRef = componentRef.hostView;\n                componentRef.changeDetectorRef.markForCheck();\n            }\n            // use provided template via input property\n            else if (buttonTemplate) {\n                embeddedViewRef = viewContainerRef.createEmbeddedView(buttonTemplate);\n            }\n            // use default component\n            else {\n                const componentRef = viewContainerRef.createComponent(ClipboardButtonComponent);\n                embeddedViewRef = componentRef.hostView;\n                componentRef.changeDetectorRef.markForCheck();\n            }\n            // declare clipboard instance variable\n            let clipboardInstance;\n            // attach clipboard.js to root node\n            embeddedViewRef.rootNodes.forEach((node) => {\n                node.onmouseover = () => toolbarWrapperElement.style.opacity = '1';\n                toolbarWrapperElement.appendChild(node);\n                clipboardInstance = new ClipboardJS(node, { text: () => preElement.innerText });\n            });\n            // destroy clipboard instance when view is destroyed\n            embeddedViewRef.onDestroy(() => clipboardInstance.destroy());\n        }\n    }\n    renderMermaid(element, options = this.DEFAULT_MERMAID_OPTIONS) {\n        if (!isPlatformBrowser(this.platform)) {\n            return;\n        }\n        if (typeof mermaid === 'undefined' || typeof mermaid.initialize === 'undefined') {\n            throw new Error(errorMermaidNotLoaded);\n        }\n        const mermaidElements = element.querySelectorAll('.mermaid');\n        if (mermaidElements.length === 0) {\n            return;\n        }\n        mermaid.initialize(options);\n        mermaid.run({ nodes: mermaidElements });\n    }\n    trimIndentation(markdown) {\n        if (!markdown) {\n            return '';\n        }\n        let indentStart;\n        return markdown\n            .split('\\n')\n            .map(line => {\n            let lineIdentStart = indentStart;\n            if (line.length > 0) {\n                lineIdentStart = isNaN(lineIdentStart)\n                    ? line.search(/\\S|$/)\n                    : Math.min(line.search(/\\S|$/), lineIdentStart);\n            }\n            if (isNaN(indentStart)) {\n                indentStart = lineIdentStart;\n            }\n            return lineIdentStart\n                ? line.substring(lineIdentStart)\n                : line;\n        }).join('\\n');\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownService, deps: [{ token: CLIPBOARD_OPTIONS, optional: true }, { token: MARKED_EXTENSIONS, optional: true }, { token: MARKED_OPTIONS, optional: true }, { token: PLATFORM_ID }, { token: SECURITY_CONTEXT }, { token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownService }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownService, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CLIPBOARD_OPTIONS]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MARKED_EXTENSIONS]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MARKED_OPTIONS]\n                }, {\n                    type: Optional\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.SecurityContext, decorators: [{\n                    type: Inject,\n                    args: [SECURITY_CONTEXT]\n                }] }, { type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }] });\n\nclass MarkdownComponent {\n    get disableSanitizer() { return this._disableSanitizer; }\n    set disableSanitizer(value) { this._disableSanitizer = this.coerceBooleanProperty(value); }\n    get inline() { return this._inline; }\n    set inline(value) { this._inline = this.coerceBooleanProperty(value); }\n    // Plugin - clipboard\n    get clipboard() { return this._clipboard; }\n    set clipboard(value) { this._clipboard = this.coerceBooleanProperty(value); }\n    // Plugin - emoji\n    get emoji() { return this._emoji; }\n    set emoji(value) { this._emoji = this.coerceBooleanProperty(value); }\n    // Plugin - katex\n    get katex() { return this._katex; }\n    set katex(value) { this._katex = this.coerceBooleanProperty(value); }\n    // Plugin - mermaid\n    get mermaid() { return this._mermaid; }\n    set mermaid(value) { this._mermaid = this.coerceBooleanProperty(value); }\n    // Plugin - lineHighlight\n    get lineHighlight() { return this._lineHighlight; }\n    set lineHighlight(value) { this._lineHighlight = this.coerceBooleanProperty(value); }\n    // Plugin - lineNumbers\n    get lineNumbers() { return this._lineNumbers; }\n    set lineNumbers(value) { this._lineNumbers = this.coerceBooleanProperty(value); }\n    // Plugin - commandLine\n    get commandLine() { return this._commandLine; }\n    set commandLine(value) { this._commandLine = this.coerceBooleanProperty(value); }\n    constructor(element, markdownService, viewContainerRef) {\n        this.element = element;\n        this.markdownService = markdownService;\n        this.viewContainerRef = viewContainerRef;\n        // Event emitters\n        this.error = new EventEmitter();\n        this.load = new EventEmitter();\n        this.ready = new EventEmitter();\n        this._clipboard = false;\n        this._commandLine = false;\n        this._disableSanitizer = false;\n        this._emoji = false;\n        this._inline = false;\n        this._katex = false;\n        this._lineHighlight = false;\n        this._lineNumbers = false;\n        this._mermaid = false;\n        this.destroyed$ = new Subject();\n    }\n    ngOnChanges() {\n        this.loadContent();\n    }\n    loadContent() {\n        if (this.data != null) {\n            this.handleData();\n            return;\n        }\n        if (this.src != null) {\n            this.handleSrc();\n            return;\n        }\n    }\n    ngAfterViewInit() {\n        if (!this.data && !this.src) {\n            this.handleTransclusion();\n        }\n        this.markdownService.reload$\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe(() => this.loadContent());\n    }\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n    async render(markdown, decodeHtml = false) {\n        const parsedOptions = {\n            decodeHtml,\n            inline: this.inline,\n            emoji: this.emoji,\n            mermaid: this.mermaid,\n            disableSanitizer: this.disableSanitizer,\n        };\n        const renderOptions = {\n            clipboard: this.clipboard,\n            clipboardOptions: {\n                buttonComponent: this.clipboardButtonComponent,\n                buttonTemplate: this.clipboardButtonTemplate,\n            },\n            katex: this.katex,\n            katexOptions: this.katexOptions,\n            mermaid: this.mermaid,\n            mermaidOptions: this.mermaidOptions,\n        };\n        const parsed = await this.markdownService.parse(markdown, parsedOptions);\n        this.element.nativeElement.innerHTML = parsed;\n        this.handlePlugins();\n        this.markdownService.render(this.element.nativeElement, renderOptions, this.viewContainerRef);\n        this.ready.emit();\n    }\n    coerceBooleanProperty(value) {\n        return value != null && `${String(value)}` !== 'false';\n    }\n    handleData() {\n        this.render(this.data);\n    }\n    handleSrc() {\n        this.markdownService\n            .getSource(this.src)\n            .subscribe({\n            next: markdown => {\n                this.render(markdown).then(() => {\n                    this.load.emit(markdown);\n                });\n            },\n            error: (error) => this.error.emit(error),\n        });\n    }\n    handleTransclusion() {\n        this.render(this.element.nativeElement.innerHTML, true);\n    }\n    handlePlugins() {\n        if (this.commandLine) {\n            this.setPluginClass(this.element.nativeElement, PrismPlugin.CommandLine);\n            this.setPluginOptions(this.element.nativeElement, {\n                dataFilterOutput: this.filterOutput,\n                dataHost: this.host,\n                dataPrompt: this.prompt,\n                dataOutput: this.output,\n                dataUser: this.user,\n            });\n        }\n        if (this.lineHighlight) {\n            this.setPluginOptions(this.element.nativeElement, { dataLine: this.line, dataLineOffset: this.lineOffset });\n        }\n        if (this.lineNumbers) {\n            this.setPluginClass(this.element.nativeElement, PrismPlugin.LineNumbers);\n            this.setPluginOptions(this.element.nativeElement, { dataStart: this.start });\n        }\n    }\n    setPluginClass(element, plugin) {\n        const preElements = element.querySelectorAll('pre');\n        for (let i = 0; i < preElements.length; i++) {\n            const classes = plugin instanceof Array ? plugin : [plugin];\n            preElements.item(i).classList.add(...classes);\n        }\n    }\n    setPluginOptions(element, options) {\n        const preElements = element.querySelectorAll('pre');\n        for (let i = 0; i < preElements.length; i++) {\n            Object.keys(options).forEach(option => {\n                const attributeValue = options[option];\n                if (attributeValue) {\n                    const attributeName = this.toLispCase(option);\n                    preElements.item(i).setAttribute(attributeName, attributeValue.toString());\n                }\n            });\n        }\n    }\n    toLispCase(value) {\n        const upperChars = value.match(/([A-Z])/g);\n        if (!upperChars) {\n            return value;\n        }\n        let str = value.toString();\n        for (let i = 0, n = upperChars.length; i < n; i++) {\n            str = str.replace(new RegExp(upperChars[i]), '-' + upperChars[i].toLowerCase());\n        }\n        if (str.slice(0, 1) === '-') {\n            str = str.slice(1);\n        }\n        return str;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownComponent, deps: [{ token: i0.ElementRef }, { token: MarkdownService }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.0\", type: MarkdownComponent, isStandalone: true, selector: \"markdown, [markdown]\", inputs: { data: \"data\", src: \"src\", disableSanitizer: \"disableSanitizer\", inline: \"inline\", clipboard: \"clipboard\", clipboardButtonComponent: \"clipboardButtonComponent\", clipboardButtonTemplate: \"clipboardButtonTemplate\", emoji: \"emoji\", katex: \"katex\", katexOptions: \"katexOptions\", mermaid: \"mermaid\", mermaidOptions: \"mermaidOptions\", lineHighlight: \"lineHighlight\", line: \"line\", lineOffset: \"lineOffset\", lineNumbers: \"lineNumbers\", start: \"start\", commandLine: \"commandLine\", filterOutput: \"filterOutput\", host: \"host\", prompt: \"prompt\", output: \"output\", user: \"user\" }, outputs: { error: \"error\", load: \"load\", ready: \"ready\" }, usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownComponent, decorators: [{\n            type: Component,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/component-selector\n                    selector: 'markdown, [markdown]',\n                    template: '<ng-content></ng-content>',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: MarkdownService }, { type: i0.ViewContainerRef }], propDecorators: { data: [{\n                type: Input\n            }], src: [{\n                type: Input\n            }], disableSanitizer: [{\n                type: Input\n            }], inline: [{\n                type: Input\n            }], clipboard: [{\n                type: Input\n            }], clipboardButtonComponent: [{\n                type: Input\n            }], clipboardButtonTemplate: [{\n                type: Input\n            }], emoji: [{\n                type: Input\n            }], katex: [{\n                type: Input\n            }], katexOptions: [{\n                type: Input\n            }], mermaid: [{\n                type: Input\n            }], mermaidOptions: [{\n                type: Input\n            }], lineHighlight: [{\n                type: Input\n            }], line: [{\n                type: Input\n            }], lineOffset: [{\n                type: Input\n            }], lineNumbers: [{\n                type: Input\n            }], start: [{\n                type: Input\n            }], commandLine: [{\n                type: Input\n            }], filterOutput: [{\n                type: Input\n            }], host: [{\n                type: Input\n            }], prompt: [{\n                type: Input\n            }], output: [{\n                type: Input\n            }], user: [{\n                type: Input\n            }], error: [{\n                type: Output\n            }], load: [{\n                type: Output\n            }], ready: [{\n                type: Output\n            }] } });\n\nclass MarkdownPipe {\n    constructor(domSanitizer, elementRef, markdownService, viewContainerRef, zone) {\n        this.domSanitizer = domSanitizer;\n        this.elementRef = elementRef;\n        this.markdownService = markdownService;\n        this.viewContainerRef = viewContainerRef;\n        this.zone = zone;\n    }\n    async transform(value, options) {\n        if (value == null) {\n            return '';\n        }\n        if (typeof value !== 'string') {\n            console.error(`MarkdownPipe has been invoked with an invalid value type [${typeof value}]`);\n            return value;\n        }\n        const markdown = await this.markdownService.parse(value, options);\n        this.zone.onStable\n            .pipe(first())\n            .subscribe(() => this.markdownService.render(this.elementRef.nativeElement, options, this.viewContainerRef));\n        return this.domSanitizer.bypassSecurityTrustHtml(markdown);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownPipe, deps: [{ token: i2.DomSanitizer }, { token: i0.ElementRef }, { token: MarkdownService }, { token: i0.ViewContainerRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownPipe, isStandalone: true, name: \"markdown\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'markdown',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i2.DomSanitizer }, { type: i0.ElementRef }, { type: MarkdownService }, { type: i0.ViewContainerRef }, { type: i0.NgZone }] });\n\nfunction provideMarkdown(markdownModuleConfig) {\n    return [\n        MarkdownService,\n        markdownModuleConfig?.loader ?? [],\n        markdownModuleConfig?.clipboardOptions ?? [],\n        markdownModuleConfig?.markedOptions ?? [],\n        {\n            provide: MARKED_EXTENSIONS,\n            useValue: markdownModuleConfig?.markedExtensions ?? [],\n        },\n        {\n            provide: SECURITY_CONTEXT,\n            useValue: markdownModuleConfig?.sanitize ?? SecurityContext.HTML,\n        },\n    ];\n}\n\nconst sharedDeclarations = [\n    ClipboardButtonComponent,\n    LanguagePipe,\n    MarkdownComponent,\n    MarkdownPipe,\n];\nclass MarkdownModule {\n    static forRoot(markdownModuleConfig) {\n        return {\n            ngModule: MarkdownModule,\n            providers: [\n                provideMarkdown(markdownModuleConfig),\n            ],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: MarkdownModule,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownModule, imports: [CommonModule, ClipboardButtonComponent,\n            LanguagePipe,\n            MarkdownComponent,\n            MarkdownPipe], exports: [ClipboardButtonComponent,\n            LanguagePipe,\n            MarkdownComponent,\n            MarkdownPipe] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.0\", ngImport: i0, type: MarkdownModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, ...sharedDeclarations],\n                    exports: sharedDeclarations,\n                }]\n        }] });\n\n/* eslint-disable */\nvar MermaidAPI;\n(function (MermaidAPI) {\n    let SecurityLevel;\n    (function (SecurityLevel) {\n        /**\n         * (default) tags in text are encoded, click functionality is disabled\n         */\n        SecurityLevel[\"Strict\"] = \"strict\";\n        /**\n         * tags in text are allowed, click functionality is enabled\n         */\n        SecurityLevel[\"Loose\"] = \"loose\";\n        /**\n         * html tags in text are allowed, (only script element is removed), click functionality is enabled\n         */\n        SecurityLevel[\"Antiscript\"] = \"antiscript\";\n        /**\n         * with this security level all rendering takes place in a sandboxed iframe.\n         * This prevent any javascript running in the context.\n         * This may hinder interactive functionality of the diagram like scripts,\n         * popups in sequence diagram or links to other tabs/targets etc.\n         */\n        SecurityLevel[\"Sandbox\"] = \"sandbox\";\n    })(SecurityLevel = MermaidAPI.SecurityLevel || (MermaidAPI.SecurityLevel = {}));\n    let Theme;\n    (function (Theme) {\n        /**\n         * Designed to modified, as the name implies it is supposed to be used as the base for making custom themes.\n         */\n        Theme[\"Base\"] = \"base\";\n        /**\n         * A theme full of light greens that is easy on the eyes.\n         */\n        Theme[\"Forest\"] = \"forest\";\n        /**\n         * A theme that would go well with other dark colored elements.\n         */\n        Theme[\"Dark\"] = \"dark\";\n        /**\n         *  The default theme for all diagrams.\n         */\n        Theme[\"Default\"] = \"default\";\n        /**\n         * The theme to be used for black and white printing\n         */\n        Theme[\"Neutral\"] = \"neutral\";\n    })(Theme = MermaidAPI.Theme || (MermaidAPI.Theme = {}));\n    let LogLevel;\n    (function (LogLevel) {\n        LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n        LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n        LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n        LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n        LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n    })(LogLevel = MermaidAPI.LogLevel || (MermaidAPI.LogLevel = {}));\n})(MermaidAPI || (MermaidAPI = {}));\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CLIPBOARD_OPTIONS, ClipboardButtonComponent, ExtendedRenderer, KatexSpecificOptions, LanguagePipe, MARKED_EXTENSIONS, MARKED_OPTIONS, MarkdownComponent, MarkdownModule, MarkdownPipe, MarkdownService, MermaidAPI, PrismPlugin, SECURITY_CONTEXT, errorClipboardNotLoaded, errorClipboardViewContainerRequired, errorJoyPixelsNotLoaded, errorKatexNotLoaded, errorMermaidNotLoaded, errorSrcWithoutHttpClient, provideMarkdown };\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,iBAAiB,EAAEC,YAAY,QAAQ,iBAAiB;AAC5E,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC,SAASC,SAAS,EAAEC,uBAAuB,EAAEC,cAAc,EAAEC,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,KAAK,EAAEC,MAAM,EAAEC,eAAe,EAAEC,QAAQ,QAAQ,eAAe;AAC3L,SAASC,OAAO,EAAEC,EAAE,EAAEC,KAAK,EAAEC,KAAK,QAAQ,MAAM;AAChD,SAASC,KAAK,EAAEC,SAAS,EAAEC,oBAAoB,EAAEC,WAAW,EAAEC,SAAS,EAAEC,GAAG,EAAEC,SAAS,EAAEC,KAAK,QAAQ,gBAAgB;AACtH,SAASC,QAAQ,EAAEC,MAAM,QAAQ,QAAQ;AACzC,SAASD,QAAQ,IAAIE,cAAc,QAAQ,QAAQ;AACnD,OAAO,KAAKC,EAAE,MAAM,sBAAsB;AAC1C,OAAO,KAAKC,EAAE,MAAM,2BAA2B;AAAC,MAAAC,GAAA;AAEhD,MAAMC,gBAAgB,GAAG,MAAM;AAC/B,MAAMC,kBAAkB,GAAG,QAAQ;AACnC,MAAMC,wBAAwB,CAAC;EAC3BC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,aAAa,GAAG,IAAItB,OAAO,CAAC,CAAC;IAClC,IAAI,CAACuB,OAAO,GAAG,IAAI,CAACD,aAAa,CAACE,IAAI,CAACnB,SAAS,CAAC,MAAMF,KAAK,CAACF,EAAE,CAAC,IAAI,CAAC,EAAEC,KAAK,CAAC,IAAI,CAAC,CAACsB,IAAI,CAACpB,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEE,oBAAoB,CAAC,CAAC,EAAEC,WAAW,CAAC,CAAC,CAAC,CAAC;IAChJ,IAAI,CAACkB,WAAW,GAAG,IAAI,CAACF,OAAO,CAACC,IAAI,CAAChB,SAAS,CAAC,KAAK,CAAC,EAAEC,GAAG,CAACiB,MAAM,IAAIA,MAAM,GACrEP,kBAAkB,GAClBD,gBAAgB,CAAC,CAAC;EAC5B;EACAS,sBAAsBA,CAAA,EAAG;IACrB,IAAI,CAACL,aAAa,CAACM,IAAI,CAAC,CAAC;EAC7B;EAAC,QAAAC,CAAA,GACQ,IAAI,CAACC,IAAI,YAAAC,iCAAAC,CAAA;IAAA,YAAAA,CAAA,IAAwFZ,wBAAwB;EAAA,CAAmD;EAAA,QAAAa,EAAA,GAC5K,IAAI,CAACC,IAAI,kBAD8EhD,EAAE,CAAAiD,iBAAA;IAAAC,IAAA,EACJhB,wBAAwB;IAAAiB,SAAA;IAAAC,UAAA;IAAAC,QAAA,GADtBrD,EAAE,CAAAsD,mBAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,kCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QAAF5D,EAAE,CAAA8D,cAAA,eAMlG,CAAC;QAN+F9D,EAAE,CAAA+D,UAAA,mBAAAC,0DAAA;UAAA,OAKvFH,GAAA,CAAApB,sBAAA,CAAuB,CAAC;QAAA,EAAC;QAL4DzC,EAAE,CAAAiE,MAAA;QAAFjE,EAAE,CAAAkE,MAAA,EAMzE,CAAC;QANsElE,EAAE,CAAAiE,MAAA;QAAFjE,EAAE,CAAAmE,YAAA,CAMhE,CAAC;MAAA;MAAA,IAAAP,EAAA;QAN6D5D,EAAE,CAAAoE,WAAA,WAAFpE,EAAE,CAAAqE,WAAA,OAAAR,GAAA,CAAAxB,OAAA,CAIjE,CAAC;QAJ8DrC,EAAE,CAAAsE,SAAA,EAMzE,CAAC;QANsEtE,EAAE,CAAAuE,iBAAA,CAAFvE,EAAE,CAAAqE,WAAA,OAAAR,GAAA,CAAAtB,WAAA,CAMzE,CAAC;MAAA;IAAA;IAAAiC,YAAA,GAC4B3E,SAAS;IAAA4E,aAAA;IAAAC,eAAA;EAAA,EAAyE;AAC5I;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAToG3E,EAAE,CAAA4E,iBAAA,CASX1C,wBAAwB,EAAc,CAAC;IACtHgB,IAAI,EAAEjD,SAAS;IACf4E,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,oBAAoB;MAC9BpB,QAAQ,EAAG;AAC/B;AACA;AACA;AACA;AACA;AACA,GAAG;MACiBgB,eAAe,EAAExE,uBAAuB,CAAC6E,MAAM;MAC/C3B,UAAU,EAAE,IAAI;MAChB4B,OAAO,EAAE,CAACnF,SAAS;IACvB,CAAC;EACT,CAAC,CAAC;AAAA;AAEV,MAAMoF,iBAAiB,GAAG,IAAI9E,cAAc,CAAC,mBAAmB,CAAC;;AAEjE;AACA,MAAM+E,oBAAoB,CAAC;AAG3B,MAAMC,YAAY,CAAC;EACfC,SAASA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACvB,IAAID,KAAK,IAAI,IAAI,EAAE;MACfA,KAAK,GAAG,EAAE;IACd;IACA,IAAIC,QAAQ,IAAI,IAAI,EAAE;MAClBA,QAAQ,GAAG,EAAE;IACjB;IACA,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;MAC3BE,OAAO,CAACC,KAAK,CAAE,6DAA4D,OAAOH,KAAM,GAAE,CAAC;MAC3F,OAAOA,KAAK;IAChB;IACA,IAAI,OAAOC,QAAQ,KAAK,QAAQ,EAAE;MAC9BC,OAAO,CAACC,KAAK,CAAE,4DAA2D,OAAOF,QAAS,GAAE,CAAC;MAC7F,OAAOD,KAAK;IAChB;IACA,OAAO,KAAK,GAAGC,QAAQ,GAAG,IAAI,GAAGD,KAAK,GAAG,OAAO;EACpD;EAAC,QAAA1C,CAAA,GACQ,IAAI,CAACC,IAAI,YAAA6C,qBAAA3C,CAAA;IAAA,YAAAA,CAAA,IAAwFqC,YAAY;EAAA,CAA8C;EAAA,QAAApC,EAAA,GAC3J,IAAI,CAAC2C,KAAK,kBAnD6E1F,EAAE,CAAA2F,YAAA;IAAAC,IAAA;IAAA1C,IAAA,EAmDMiC,YAAY;IAAAU,IAAA;IAAAzC,UAAA;EAAA,EAAyC;AACjK;AACA;EAAA,QAAAuB,SAAA,oBAAAA,SAAA,KArDoG3E,EAAE,CAAA4E,iBAAA,CAqDXO,YAAY,EAAc,CAAC;IAC1GjC,IAAI,EAAE9C,IAAI;IACVyE,IAAI,EAAE,CAAC;MACCe,IAAI,EAAE,UAAU;MAChBxC,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC;AAAA;AAEV,IAAI0C,WAAW;AACf,CAAC,UAAUA,WAAW,EAAE;EACpBA,WAAW,CAAC,aAAa,CAAC,GAAG,cAAc;EAC3CA,WAAW,CAAC,eAAe,CAAC,GAAG,gBAAgB;EAC/CA,WAAW,CAAC,aAAa,CAAC,GAAG,cAAc;AAC/C,CAAC,EAAEA,WAAW,KAAKA,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;AAErC,MAAMC,iBAAiB,GAAG,IAAI5F,cAAc,CAAC,mBAAmB,CAAC;AAEjE,MAAM6F,cAAc,GAAG,IAAI7F,cAAc,CAAC,gBAAgB,CAAC;;AAE3D;AACA,MAAM8F,uBAAuB,GAAG,6JAA6J;AAC7L,MAAMC,mBAAmB,GAAG,qJAAqJ;AACjL,MAAMC,qBAAqB,GAAG,yJAAyJ;AACvL,MAAMC,uBAAuB,GAAG,6JAA6J;AAC7L,MAAMC,mCAAmC,GAAG,mJAAmJ;AAC/L,MAAMC,yBAAyB,GAAG,2JAA2J;AAC7L;AACA,MAAMC,gBAAgB,GAAG,IAAIpG,cAAc,CAAC,kBAAkB,CAAC;AAC/D,MAAMqG,gBAAgB,SAAS9E,QAAQ,CAAC;EACpCS,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGsE,SAAS,CAAC;IACnB,IAAI,CAACC,yCAAyC,GAAG,KAAK;IACtD,IAAI,CAACC,sCAAsC,GAAG,KAAK;EACvD;AACJ;AACA,MAAMC,eAAe,CAAC;EAClB,IAAIC,OAAOA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,QAAQ;EAAE;EACtC,IAAID,OAAOA,CAACxB,KAAK,EAAE;IACf,IAAI,CAACyB,QAAQ,GAAG;MAAE,GAAG,IAAI,CAACC,sBAAsB;MAAE,GAAG1B;IAAM,CAAC;EAChE;EACA,IAAI2B,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACH,OAAO,CAACG,QAAQ;EAAE;EAC/C,IAAIA,QAAQA,CAAC3B,KAAK,EAAE;IAChB,IAAI,CAACwB,OAAO,CAACG,QAAQ,GAAG3B,KAAK;EACjC;EACAlD,WAAWA,CAAC8E,gBAAgB,EAAEC,UAAU,EAAEL,OAAO,EAAEM,QAAQ,EAAEC,eAAe,EAAEC,IAAI,EAAEC,SAAS,EAAE;IAC3F,IAAI,CAACL,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACP,sBAAsB,GAAG;MAC1BC,QAAQ,EAAE,IAAItF,QAAQ,CAAC;IAC3B,CAAC;IACD,IAAI,CAAC6F,qBAAqB,GAAG;MACzBC,UAAU,EAAE,CACR;QAAEC,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAK,CAAC,EAC1C;QAAEF,IAAI,EAAE,GAAG;QAAEC,KAAK,EAAE,GAAG;QAAEC,OAAO,EAAE;MAAM,CAAC,EACzC;QAAEF,IAAI,EAAE,KAAK;QAAEC,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAM,CAAC,EAC7C;QAAEF,IAAI,EAAE,mBAAmB;QAAEC,KAAK,EAAE,iBAAiB;QAAEC,OAAO,EAAE;MAAK,CAAC,EACtE;QAAEF,IAAI,EAAE,gBAAgB;QAAEC,KAAK,EAAE,cAAc;QAAEC,OAAO,EAAE;MAAK,CAAC,EAChE;QAAEF,IAAI,EAAE,kBAAkB;QAAEC,KAAK,EAAE,gBAAgB;QAAEC,OAAO,EAAE;MAAK,CAAC,EACpE;QAAEF,IAAI,EAAE,iBAAiB;QAAEC,KAAK,EAAE,eAAe;QAAEC,OAAO,EAAE;MAAK,CAAC,EAClE;QAAEF,IAAI,EAAE,aAAa;QAAEC,KAAK,EAAE,WAAW;QAAEC,OAAO,EAAE;MAAK,CAAC,EAC1D;QAAEF,IAAI,EAAE,KAAK;QAAEC,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAK,CAAC;IAEpD,CAAC;IACD,IAAI,CAACC,uBAAuB,GAAG;MAC3BC,WAAW,EAAE;IACjB,CAAC;IACD,IAAI,CAACC,yBAAyB,GAAG;MAC7BC,eAAe,EAAEC;IACrB,CAAC;IACD,IAAI,CAACC,qBAAqB,GAAG;MACzBC,UAAU,EAAE,KAAK;MACjBC,MAAM,EAAE,KAAK;MACbC,KAAK,EAAE,KAAK;MACZC,OAAO,EAAE,KAAK;MACdC,aAAa,EAAEN,SAAS;MACxBO,gBAAgB,EAAE;IACtB,CAAC;IACD,IAAI,CAACC,sBAAsB,GAAG;MAC1BC,SAAS,EAAE,KAAK;MAChBxB,gBAAgB,EAAEe,SAAS;MAC3BU,KAAK,EAAE,KAAK;MACZC,YAAY,EAAEX,SAAS;MACvBK,OAAO,EAAE,KAAK;MACdO,cAAc,EAAEZ;IACpB,CAAC;IACD,IAAI,CAACa,QAAQ,GAAG,IAAI/H,OAAO,CAAC,CAAC;IAC7B,IAAI,CAACgI,OAAO,GAAG,IAAI,CAACD,QAAQ,CAACE,YAAY,CAAC,CAAC;IAC3C,IAAI,CAAClC,OAAO,GAAGA,OAAO;EAC1B;EACAmC,KAAKA,CAACC,QAAQ,EAAEC,YAAY,GAAG,IAAI,CAACjB,qBAAqB,EAAE;IACvD,MAAM;MAAEC,UAAU;MAAEC,MAAM;MAAEC,KAAK;MAAEC,OAAO;MAAEE;IAAkB,CAAC,GAAGW,YAAY;IAC9E,MAAMZ,aAAa,GAAG;MAClB,GAAG,IAAI,CAACzB,OAAO;MACf,GAAGqC,YAAY,CAACZ;IACpB,CAAC;IACD,MAAMtB,QAAQ,GAAGsB,aAAa,CAACtB,QAAQ,IAAI,IAAI,CAACA,QAAQ,IAAI,IAAItF,QAAQ,CAAC,CAAC;IAC1E,IAAI,IAAI,CAACwF,UAAU,EAAE;MACjB,IAAI,CAACF,QAAQ,GAAG,IAAI,CAACmC,4BAA4B,CAACnC,QAAQ,CAAC;IAC/D;IACA,IAAIqB,OAAO,EAAE;MACT,IAAI,CAACrB,QAAQ,GAAG,IAAI,CAACoC,yBAAyB,CAACpC,QAAQ,CAAC;IAC5D;IACA,MAAMqC,OAAO,GAAG,IAAI,CAACC,eAAe,CAACL,QAAQ,CAAC;IAC9C,MAAMM,OAAO,GAAGrB,UAAU,GAAG,IAAI,CAACA,UAAU,CAACmB,OAAO,CAAC,GAAGA,OAAO;IAC/D,MAAMG,SAAS,GAAGpB,KAAK,GAAG,IAAI,CAACqB,UAAU,CAACF,OAAO,CAAC,GAAGA,OAAO;IAC5D,MAAM5H,MAAM,GAAG,IAAI,CAAC+H,WAAW,CAACF,SAAS,EAAElB,aAAa,EAAEH,MAAM,CAAC;IACjE,MAAMwB,SAAS,GAAGpB,gBAAgB,GAAG5G,MAAM,GAAG,IAAI,CAAC2F,SAAS,CAACsC,QAAQ,CAAC,IAAI,CAACxC,eAAe,EAAEzF,MAAM,CAAC;IACnG,OAAOgI,SAAS,IAAI,EAAE;EAC1B;EACAE,MAAMA,CAACC,OAAO,EAAEjD,OAAO,GAAG,IAAI,CAAC2B,sBAAsB,EAAEuB,gBAAgB,EAAE;IACrE,MAAM;MAAEtB,SAAS;MAAExB,gBAAgB;MAAEyB,KAAK;MAAEC,YAAY;MAAEN,OAAO;MAAEO;IAAgB,CAAC,GAAG/B,OAAO;IAC9F,IAAI6B,KAAK,EAAE;MACP,IAAI,CAACsB,WAAW,CAACF,OAAO,EAAE;QACtB,GAAG,IAAI,CAACvC,qBAAqB;QAC7B,GAAGoB;MACP,CAAC,CAAC;IACN;IACA,IAAIN,OAAO,EAAE;MACT,IAAI,CAAC4B,aAAa,CAACH,OAAO,EAAE;QACxB,GAAG,IAAI,CAAClC,uBAAuB;QAC/B,GAAGgB;MACP,CAAC,CAAC;IACN;IACA,IAAIH,SAAS,EAAE;MACX,IAAI,CAACyB,eAAe,CAACJ,OAAO,EAAEC,gBAAgB,EAAE;QAC5C,GAAG,IAAI,CAACjC,yBAAyB;QACjC,GAAG,IAAI,CAACb,gBAAgB;QACxB,GAAGA;MACP,CAAC,CAAC;IACN;IACA,IAAI,CAACkD,SAAS,CAACL,OAAO,CAAC;EAC3B;EACAM,MAAMA,CAAA,EAAG;IACL,IAAI,CAACvB,QAAQ,CAACnG,IAAI,CAAC,CAAC;EACxB;EACA2H,SAASA,CAACC,GAAG,EAAE;IACX,IAAI,CAAC,IAAI,CAACjD,IAAI,EAAE;MACZ,MAAM,IAAIkD,KAAK,CAACjE,yBAAyB,CAAC;IAC9C;IACA,OAAO,IAAI,CAACe,IAAI,CACXmD,GAAG,CAACF,GAAG,EAAE;MAAEG,YAAY,EAAE;IAAO,CAAC,CAAC,CAClCnI,IAAI,CAACf,GAAG,CAAC0H,QAAQ,IAAI,IAAI,CAACyB,eAAe,CAACJ,GAAG,EAAErB,QAAQ,CAAC,CAAC,CAAC;EACnE;EACAkB,SAASA,CAACL,OAAO,EAAE;IACf,IAAI,CAAChK,iBAAiB,CAAC,IAAI,CAACqH,QAAQ,CAAC,EAAE;MACnC;IACJ;IACA,IAAI,OAAOwD,KAAK,KAAK,WAAW,IAAI,OAAOA,KAAK,CAACC,iBAAiB,KAAK,WAAW,EAAE;MAChF;IACJ;IACA,IAAI,CAACd,OAAO,EAAE;MACVA,OAAO,GAAGe,QAAQ;IACtB;IACA,MAAMC,kBAAkB,GAAGhB,OAAO,CAACiB,gBAAgB,CAAC,oCAAoC,CAAC;IACzFC,KAAK,CAACC,SAAS,CAACC,OAAO,CAACC,IAAI,CAACL,kBAAkB,EAAGM,CAAC,IAAKA,CAAC,CAACC,SAAS,CAACC,GAAG,CAAC,eAAe,CAAC,CAAC;IACzFX,KAAK,CAACC,iBAAiB,CAACd,OAAO,CAAC;EACpC;EACA5B,UAAUA,CAACqD,IAAI,EAAE;IACb,IAAI,CAACzL,iBAAiB,CAAC,IAAI,CAACqH,QAAQ,CAAC,EAAE;MACnC,OAAOoE,IAAI;IACf;IACA,MAAMC,QAAQ,GAAGX,QAAQ,CAACY,aAAa,CAAC,UAAU,CAAC;IACnDD,QAAQ,CAACE,SAAS,GAAGH,IAAI;IACzB,OAAOC,QAAQ,CAACnG,KAAK;EACzB;EACA8D,4BAA4BA,CAACnC,QAAQ,EAAE;IACnC,MAAM2E,gBAAgB,GAAG3E,QAAQ;IACjC,IAAI2E,gBAAgB,CAACjF,yCAAyC,KAAK,IAAI,EAAE;MACrE,OAAOM,QAAQ;IACnB;IACA,IAAI,IAAI,CAACE,UAAU,EAAE0E,MAAM,GAAG,CAAC,EAAE;MAC7BjK,MAAM,CAACkK,GAAG,CAAC,GAAG,IAAI,CAAC3E,UAAU,CAAC;IAClC;IACAyE,gBAAgB,CAACjF,yCAAyC,GAAG,IAAI;IACjE,OAAOM,QAAQ;EACnB;EACAoC,yBAAyBA,CAACpC,QAAQ,EAAE;IAChC,MAAM2E,gBAAgB,GAAG3E,QAAQ;IACjC,IAAI2E,gBAAgB,CAAChF,sCAAsC,KAAK,IAAI,EAAE;MAClE,OAAOK,QAAQ;IACnB;IACA;IACA,MAAM8E,WAAW,GAAG9E,QAAQ,CAAC+E,IAAI;IACjC/E,QAAQ,CAAC+E,IAAI,GAAG,UAAUA,IAAI,EAAEzG,QAAQ,EAAE0G,SAAS,EAAE;MACjD,OAAO1G,QAAQ,KAAK,SAAS,GACtB,wBAAuByG,IAAK,QAAO,GACpCD,WAAW,CAACX,IAAI,CAAC,IAAI,EAAEY,IAAI,EAAEzG,QAAQ,EAAE0G,SAAS,CAAC;IAC3D,CAAC;IACDL,gBAAgB,CAAChF,sCAAsC,GAAG,IAAI;IAC9D,OAAOK,QAAQ;EACnB;EACA0D,eAAeA,CAACJ,GAAG,EAAErB,QAAQ,EAAE;IAC3B,MAAMgD,gBAAgB,GAAG3B,GAAG,CAAC4B,WAAW,CAAC,KAAK,CAAC;IAC/C,MAAMC,kBAAkB,GAAGF,gBAAgB,GAAG,CAAC,CAAC,GAC1C3B,GAAG,CAAC8B,SAAS,CAACH,gBAAgB,GAAG,CAAC,CAAC,GACnC3B,GAAG;IACT,MAAM+B,cAAc,GAAGF,kBAAkB,CAACD,WAAW,CAAC,GAAG,CAAC;IAC1D,MAAMI,cAAc,GAAGD,cAAc,GAAG,CAAC,CAAC,GACpCF,kBAAkB,CAACC,SAAS,CAACC,cAAc,GAAG,CAAC,CAAC,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAC9D,EAAE;IACR,MAAMC,YAAY,GAAGF,cAAc,CAACJ,WAAW,CAAC,GAAG,CAAC;IACpD,MAAMO,SAAS,GAAGD,YAAY,GAAG,CAAC,CAAC,GAC7BF,cAAc,CAACF,SAAS,CAACI,YAAY,GAAG,CAAC,CAAC,GAC1C,EAAE;IACR,OAAO,CAAC,CAACC,SAAS,IAAIA,SAAS,KAAK,IAAI,GAClC,KAAK,GAAGA,SAAS,GAAG,IAAI,GAAGxD,QAAQ,GAAG,OAAO,GAC7CA,QAAQ;EAClB;EACAS,WAAWA,CAAC6B,IAAI,EAAEjD,aAAa,EAAEH,MAAM,GAAG,KAAK,EAAE;IAC7C,IAAIG,aAAa,CAACtB,QAAQ,EAAE;MACxB;MACA;MACA,MAAMA,QAAQ,GAAG;QAAE,GAAGsB,aAAa,CAACtB;MAAS,CAAC;MAC9C,OAAOA,QAAQ,CAACN,yCAAyC;MACzD,OAAOM,QAAQ,CAACL,sCAAsC;MACtD;MACA;MACA,OAAO2B,aAAa,CAACtB,QAAQ;MAC7BrF,MAAM,CAACkK,GAAG,CAAC;QAAE7E;MAAS,CAAC,CAAC;IAC5B;IACA,OAAOmB,MAAM,GACPxG,MAAM,CAAC+K,WAAW,CAACnB,IAAI,EAAEjD,aAAa,CAAC,GACvC3G,MAAM,CAACqH,KAAK,CAACuC,IAAI,EAAEjD,aAAa,CAAC;EAC3C;EACAmB,UAAUA,CAAC8B,IAAI,EAAE;IACb,IAAI,CAACzL,iBAAiB,CAAC,IAAI,CAACqH,QAAQ,CAAC,EAAE;MACnC,OAAOoE,IAAI;IACf;IACA,IAAI,OAAOoB,SAAS,KAAK,WAAW,IAAI,OAAOA,SAAS,CAACC,kBAAkB,KAAK,WAAW,EAAE;MACzF,MAAM,IAAIrC,KAAK,CAACtE,uBAAuB,CAAC;IAC5C;IACA,OAAO0G,SAAS,CAACC,kBAAkB,CAACrB,IAAI,CAAC;EAC7C;EACAvB,WAAWA,CAACF,OAAO,EAAEjD,OAAO,EAAE;IAC1B,IAAI,CAAC/G,iBAAiB,CAAC,IAAI,CAACqH,QAAQ,CAAC,EAAE;MACnC;IACJ;IACA,IAAI,OAAOuB,KAAK,KAAK,WAAW,IAAI,OAAOmE,mBAAmB,KAAK,WAAW,EAAE;MAC5E,MAAM,IAAItC,KAAK,CAACrE,mBAAmB,CAAC;IACxC;IACA2G,mBAAmB,CAAC/C,OAAO,EAAEjD,OAAO,CAAC;EACzC;EACAqD,eAAeA,CAACJ,OAAO,EAAEC,gBAAgB,EAAElD,OAAO,EAAE;IAChD,IAAI,CAAC/G,iBAAiB,CAAC,IAAI,CAACqH,QAAQ,CAAC,EAAE;MACnC;IACJ;IACA,IAAI,OAAO2F,WAAW,KAAK,WAAW,EAAE;MACpC,MAAM,IAAIvC,KAAK,CAACnE,uBAAuB,CAAC;IAC5C;IACA,IAAI,CAAC2D,gBAAgB,EAAE;MACnB,MAAM,IAAIQ,KAAK,CAAClE,mCAAmC,CAAC;IACxD;IACA,MAAM;MAAE0B,eAAe;MAAEgF;IAAgB,CAAC,GAAGlG,OAAO;IACpD;IACA,MAAMmG,WAAW,GAAGlD,OAAO,CAACiB,gBAAgB,CAAC,KAAK,CAAC;IACnD,KAAK,IAAIkC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,WAAW,CAACpB,MAAM,EAAEqB,CAAC,EAAE,EAAE;MACzC,MAAMC,UAAU,GAAGF,WAAW,CAACG,IAAI,CAACF,CAAC,CAAC;MACtC;MACA,MAAMG,iBAAiB,GAAGvC,QAAQ,CAACY,aAAa,CAAC,KAAK,CAAC;MACvD2B,iBAAiB,CAACC,KAAK,CAACC,QAAQ,GAAG,UAAU;MAC7CJ,UAAU,CAACK,UAAU,CAACC,YAAY,CAACJ,iBAAiB,EAAEF,UAAU,CAAC;MACjEE,iBAAiB,CAACK,WAAW,CAACP,UAAU,CAAC;MACzC;MACA,MAAMQ,qBAAqB,GAAG7C,QAAQ,CAACY,aAAa,CAAC,KAAK,CAAC;MAC3DiC,qBAAqB,CAACL,KAAK,CAACC,QAAQ,GAAG,UAAU;MACjDI,qBAAqB,CAACL,KAAK,CAACM,GAAG,GAAG,MAAM;MACxCD,qBAAqB,CAACL,KAAK,CAAC3F,KAAK,GAAG,MAAM;MAC1CgG,qBAAqB,CAACL,KAAK,CAACO,OAAO,GAAG,GAAG;MACzCF,qBAAqB,CAACL,KAAK,CAACQ,UAAU,GAAG,wBAAwB;MACjEH,qBAAqB,CAACL,KAAK,CAACS,MAAM,GAAG,GAAG;MACxCV,iBAAiB,CAACW,qBAAqB,CAAC,WAAW,EAAEL,qBAAqB,CAAC;MAC3E;MACAR,UAAU,CAACc,WAAW,GAAG,MAAMN,qBAAqB,CAACL,KAAK,CAACO,OAAO,GAAG,GAAG;MACxEV,UAAU,CAACe,UAAU,GAAG,MAAMP,qBAAqB,CAACL,KAAK,CAACO,OAAO,GAAG,GAAG;MACvE;MACA,IAAIM,eAAe;MACnB;MACA;MACA,IAAInG,eAAe,EAAE;QACjB,MAAMoG,YAAY,GAAGpE,gBAAgB,CAACqE,eAAe,CAACrG,eAAe,CAAC;QACtEmG,eAAe,GAAGC,YAAY,CAACE,QAAQ;QACvCF,YAAY,CAACG,iBAAiB,CAACC,YAAY,CAAC,CAAC;MACjD;MACA;MAAA,KACK,IAAIxB,cAAc,EAAE;QACrBmB,eAAe,GAAGnE,gBAAgB,CAACyE,kBAAkB,CAACzB,cAAc,CAAC;MACzE;MACA;MAAA,KACK;QACD,MAAMoB,YAAY,GAAGpE,gBAAgB,CAACqE,eAAe,CAAClM,wBAAwB,CAAC;QAC/EgM,eAAe,GAAGC,YAAY,CAACE,QAAQ;QACvCF,YAAY,CAACG,iBAAiB,CAACC,YAAY,CAAC,CAAC;MACjD;MACA;MACA,IAAIE,iBAAiB;MACrB;MACAP,eAAe,CAACQ,SAAS,CAACxD,OAAO,CAAEyD,IAAI,IAAK;QACxCA,IAAI,CAACX,WAAW,GAAG,MAAMN,qBAAqB,CAACL,KAAK,CAACO,OAAO,GAAG,GAAG;QAClEF,qBAAqB,CAACD,WAAW,CAACkB,IAAI,CAAC;QACvCF,iBAAiB,GAAG,IAAI3B,WAAW,CAAC6B,IAAI,EAAE;UAAEC,IAAI,EAAEA,CAAA,KAAM1B,UAAU,CAAC2B;QAAU,CAAC,CAAC;MACnF,CAAC,CAAC;MACF;MACAX,eAAe,CAACY,SAAS,CAAC,MAAML,iBAAiB,CAACM,OAAO,CAAC,CAAC,CAAC;IAChE;EACJ;EACA9E,aAAaA,CAACH,OAAO,EAAEjD,OAAO,GAAG,IAAI,CAACe,uBAAuB,EAAE;IAC3D,IAAI,CAAC9H,iBAAiB,CAAC,IAAI,CAACqH,QAAQ,CAAC,EAAE;MACnC;IACJ;IACA,IAAI,OAAOkB,OAAO,KAAK,WAAW,IAAI,OAAOA,OAAO,CAAC2G,UAAU,KAAK,WAAW,EAAE;MAC7E,MAAM,IAAIzE,KAAK,CAACpE,qBAAqB,CAAC;IAC1C;IACA,MAAM8I,eAAe,GAAGnF,OAAO,CAACiB,gBAAgB,CAAC,UAAU,CAAC;IAC5D,IAAIkE,eAAe,CAACrD,MAAM,KAAK,CAAC,EAAE;MAC9B;IACJ;IACAvD,OAAO,CAAC2G,UAAU,CAACnI,OAAO,CAAC;IAC3BwB,OAAO,CAAC6G,GAAG,CAAC;MAAEC,KAAK,EAAEF;IAAgB,CAAC,CAAC;EAC3C;EACA3F,eAAeA,CAACL,QAAQ,EAAE;IACtB,IAAI,CAACA,QAAQ,EAAE;MACX,OAAO,EAAE;IACb;IACA,IAAImG,WAAW;IACf,OAAOnG,QAAQ,CACVsD,KAAK,CAAC,IAAI,CAAC,CACXhL,GAAG,CAAC8N,IAAI,IAAI;MACb,IAAIC,cAAc,GAAGF,WAAW;MAChC,IAAIC,IAAI,CAACzD,MAAM,GAAG,CAAC,EAAE;QACjB0D,cAAc,GAAGC,KAAK,CAACD,cAAc,CAAC,GAChCD,IAAI,CAACG,MAAM,CAAC,MAAM,CAAC,GACnBC,IAAI,CAACC,GAAG,CAACL,IAAI,CAACG,MAAM,CAAC,MAAM,CAAC,EAAEF,cAAc,CAAC;MACvD;MACA,IAAIC,KAAK,CAACH,WAAW,CAAC,EAAE;QACpBA,WAAW,GAAGE,cAAc;MAChC;MACA,OAAOA,cAAc,GACfD,IAAI,CAACjD,SAAS,CAACkD,cAAc,CAAC,GAC9BD,IAAI;IACd,CAAC,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC;EACjB;EAAC,QAAAhN,CAAA,GACQ,IAAI,CAACC,IAAI,YAAAgN,wBAAA9M,CAAA;IAAA,YAAAA,CAAA,IAAwF8D,eAAe,EA9YzB5G,EAAE,CAAA6P,QAAA,CA8YyC5K,iBAAiB,MA9Y5DjF,EAAE,CAAA6P,QAAA,CA8YuF9J,iBAAiB,MA9Y1G/F,EAAE,CAAA6P,QAAA,CA8YqI7J,cAAc,MA9YrJhG,EAAE,CAAA6P,QAAA,CA8YgLxP,WAAW,GA9Y7LL,EAAE,CAAA6P,QAAA,CA8YwMtJ,gBAAgB,GA9Y1NvG,EAAE,CAAA6P,QAAA,CA8YqOhO,EAAE,CAACiO,UAAU,MA9YpP9P,EAAE,CAAA6P,QAAA,CA8Y+Q/N,EAAE,CAACiO,YAAY;EAAA,CAA6C;EAAA,QAAAhN,EAAA,GACpa,IAAI,CAACiN,KAAK,kBA/Y6EhQ,EAAE,CAAAiQ,kBAAA;IAAAC,KAAA,EA+YYtJ,eAAe;IAAAuJ,OAAA,EAAfvJ,eAAe,CAAAhE;EAAA,EAAG;AACpI;AACA;EAAA,QAAA+B,SAAA,oBAAAA,SAAA,KAjZoG3E,EAAE,CAAA4E,iBAAA,CAiZXgC,eAAe,EAAc,CAAC;IAC7G1D,IAAI,EAAE5C;EACV,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAE4C,IAAI,EAAE8E,SAAS;IAAEoI,UAAU,EAAE,CAAC;MAC/ClN,IAAI,EAAE3C,MAAM;MACZsE,IAAI,EAAE,CAACI,iBAAiB;IAC5B,CAAC,EAAE;MACC/B,IAAI,EAAE1C;IACV,CAAC;EAAE,CAAC,EAAE;IAAE0C,IAAI,EAAE8E,SAAS;IAAEoI,UAAU,EAAE,CAAC;MAClClN,IAAI,EAAE3C,MAAM;MACZsE,IAAI,EAAE,CAACkB,iBAAiB;IAC5B,CAAC,EAAE;MACC7C,IAAI,EAAE1C;IACV,CAAC;EAAE,CAAC,EAAE;IAAE0C,IAAI,EAAE8E,SAAS;IAAEoI,UAAU,EAAE,CAAC;MAClClN,IAAI,EAAE3C,MAAM;MACZsE,IAAI,EAAE,CAACmB,cAAc;IACzB,CAAC,EAAE;MACC9C,IAAI,EAAE1C;IACV,CAAC;EAAE,CAAC,EAAE;IAAE0C,IAAI,EAAEmN,MAAM;IAAED,UAAU,EAAE,CAAC;MAC/BlN,IAAI,EAAE3C,MAAM;MACZsE,IAAI,EAAE,CAACxE,WAAW;IACtB,CAAC;EAAE,CAAC,EAAE;IAAE6C,IAAI,EAAElD,EAAE,CAACY,eAAe;IAAEwP,UAAU,EAAE,CAAC;MAC3ClN,IAAI,EAAE3C,MAAM;MACZsE,IAAI,EAAE,CAAC0B,gBAAgB;IAC3B,CAAC;EAAE,CAAC,EAAE;IAAErD,IAAI,EAAErB,EAAE,CAACiO,UAAU;IAAEM,UAAU,EAAE,CAAC;MACtClN,IAAI,EAAE1C;IACV,CAAC;EAAE,CAAC,EAAE;IAAE0C,IAAI,EAAEpB,EAAE,CAACiO;EAAa,CAAC,CAAC;AAAA;AAEhD,MAAMO,iBAAiB,CAAC;EACpB,IAAI/H,gBAAgBA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACgI,iBAAiB;EAAE;EACxD,IAAIhI,gBAAgBA,CAAClD,KAAK,EAAE;IAAE,IAAI,CAACkL,iBAAiB,GAAG,IAAI,CAACC,qBAAqB,CAACnL,KAAK,CAAC;EAAE;EAC1F,IAAI8C,MAAMA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACsI,OAAO;EAAE;EACpC,IAAItI,MAAMA,CAAC9C,KAAK,EAAE;IAAE,IAAI,CAACoL,OAAO,GAAG,IAAI,CAACD,qBAAqB,CAACnL,KAAK,CAAC;EAAE;EACtE;EACA,IAAIoD,SAASA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACiI,UAAU;EAAE;EAC1C,IAAIjI,SAASA,CAACpD,KAAK,EAAE;IAAE,IAAI,CAACqL,UAAU,GAAG,IAAI,CAACF,qBAAqB,CAACnL,KAAK,CAAC;EAAE;EAC5E;EACA,IAAI+C,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACuI,MAAM;EAAE;EAClC,IAAIvI,KAAKA,CAAC/C,KAAK,EAAE;IAAE,IAAI,CAACsL,MAAM,GAAG,IAAI,CAACH,qBAAqB,CAACnL,KAAK,CAAC;EAAE;EACpE;EACA,IAAIqD,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACkI,MAAM;EAAE;EAClC,IAAIlI,KAAKA,CAACrD,KAAK,EAAE;IAAE,IAAI,CAACuL,MAAM,GAAG,IAAI,CAACJ,qBAAqB,CAACnL,KAAK,CAAC;EAAE;EACpE;EACA,IAAIgD,OAAOA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACwI,QAAQ;EAAE;EACtC,IAAIxI,OAAOA,CAAChD,KAAK,EAAE;IAAE,IAAI,CAACwL,QAAQ,GAAG,IAAI,CAACL,qBAAqB,CAACnL,KAAK,CAAC;EAAE;EACxE;EACA,IAAIyL,aAAaA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,cAAc;EAAE;EAClD,IAAID,aAAaA,CAACzL,KAAK,EAAE;IAAE,IAAI,CAAC0L,cAAc,GAAG,IAAI,CAACP,qBAAqB,CAACnL,KAAK,CAAC;EAAE;EACpF;EACA,IAAI2L,WAAWA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,YAAY;EAAE;EAC9C,IAAID,WAAWA,CAAC3L,KAAK,EAAE;IAAE,IAAI,CAAC4L,YAAY,GAAG,IAAI,CAACT,qBAAqB,CAACnL,KAAK,CAAC;EAAE;EAChF;EACA,IAAI6L,WAAWA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,YAAY;EAAE;EAC9C,IAAID,WAAWA,CAAC7L,KAAK,EAAE;IAAE,IAAI,CAAC8L,YAAY,GAAG,IAAI,CAACX,qBAAqB,CAACnL,KAAK,CAAC;EAAE;EAChFlD,WAAWA,CAAC2H,OAAO,EAAEsH,eAAe,EAAErH,gBAAgB,EAAE;IACpD,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACsH,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACrH,gBAAgB,GAAGA,gBAAgB;IACxC;IACA,IAAI,CAACvE,KAAK,GAAG,IAAI/E,YAAY,CAAC,CAAC;IAC/B,IAAI,CAAC4Q,IAAI,GAAG,IAAI5Q,YAAY,CAAC,CAAC;IAC9B,IAAI,CAAC6Q,KAAK,GAAG,IAAI7Q,YAAY,CAAC,CAAC;IAC/B,IAAI,CAACiQ,UAAU,GAAG,KAAK;IACvB,IAAI,CAACS,YAAY,GAAG,KAAK;IACzB,IAAI,CAACZ,iBAAiB,GAAG,KAAK;IAC9B,IAAI,CAACI,MAAM,GAAG,KAAK;IACnB,IAAI,CAACF,OAAO,GAAG,KAAK;IACpB,IAAI,CAACG,MAAM,GAAG,KAAK;IACnB,IAAI,CAACG,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACE,YAAY,GAAG,KAAK;IACzB,IAAI,CAACJ,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACU,UAAU,GAAG,IAAIzQ,OAAO,CAAC,CAAC;EACnC;EACA0Q,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,WAAW,CAAC,CAAC;EACtB;EACAA,WAAWA,CAAA,EAAG;IACV,IAAI,IAAI,CAACC,IAAI,IAAI,IAAI,EAAE;MACnB,IAAI,CAACC,UAAU,CAAC,CAAC;MACjB;IACJ;IACA,IAAI,IAAI,CAACrH,GAAG,IAAI,IAAI,EAAE;MAClB,IAAI,CAACsH,SAAS,CAAC,CAAC;MAChB;IACJ;EACJ;EACAC,eAAeA,CAAA,EAAG;IACd,IAAI,CAAC,IAAI,CAACH,IAAI,IAAI,CAAC,IAAI,CAACpH,GAAG,EAAE;MACzB,IAAI,CAACwH,kBAAkB,CAAC,CAAC;IAC7B;IACA,IAAI,CAACV,eAAe,CAACtI,OAAO,CACvBxG,IAAI,CAACd,SAAS,CAAC,IAAI,CAAC+P,UAAU,CAAC,CAAC,CAChCQ,SAAS,CAAC,MAAM,IAAI,CAACN,WAAW,CAAC,CAAC,CAAC;EAC5C;EACAO,WAAWA,CAAA,EAAG;IACV,IAAI,CAACT,UAAU,CAAC7O,IAAI,CAAC,CAAC;IACtB,IAAI,CAAC6O,UAAU,CAACU,QAAQ,CAAC,CAAC;EAC9B;EACMpI,MAAMA,CAACZ,QAAQ,EAAEf,UAAU,GAAG,KAAK,EAAE;IAAA,IAAAgK,KAAA;IAAA,OAAAC,iBAAA;MACvC,MAAMC,aAAa,GAAG;QAClBlK,UAAU;QACVC,MAAM,EAAE+J,KAAI,CAAC/J,MAAM;QACnBC,KAAK,EAAE8J,KAAI,CAAC9J,KAAK;QACjBC,OAAO,EAAE6J,KAAI,CAAC7J,OAAO;QACrBE,gBAAgB,EAAE2J,KAAI,CAAC3J;MAC3B,CAAC;MACD,MAAM8J,aAAa,GAAG;QAClB5J,SAAS,EAAEyJ,KAAI,CAACzJ,SAAS;QACzBxB,gBAAgB,EAAE;UACdc,eAAe,EAAEmK,KAAI,CAACI,wBAAwB;UAC9CvF,cAAc,EAAEmF,KAAI,CAACK;QACzB,CAAC;QACD7J,KAAK,EAAEwJ,KAAI,CAACxJ,KAAK;QACjBC,YAAY,EAAEuJ,KAAI,CAACvJ,YAAY;QAC/BN,OAAO,EAAE6J,KAAI,CAAC7J,OAAO;QACrBO,cAAc,EAAEsJ,KAAI,CAACtJ;MACzB,CAAC;MACD,MAAM4J,MAAM,SAASN,KAAI,CAACd,eAAe,CAACpI,KAAK,CAACC,QAAQ,EAAEmJ,aAAa,CAAC;MACxEF,KAAI,CAACpI,OAAO,CAAC2I,aAAa,CAAC/G,SAAS,GAAG8G,MAAM;MAC7CN,KAAI,CAACQ,aAAa,CAAC,CAAC;MACpBR,KAAI,CAACd,eAAe,CAACvH,MAAM,CAACqI,KAAI,CAACpI,OAAO,CAAC2I,aAAa,EAAEJ,aAAa,EAAEH,KAAI,CAACnI,gBAAgB,CAAC;MAC7FmI,KAAI,CAACZ,KAAK,CAACqB,IAAI,CAAC,CAAC;IAAC;EACtB;EACAnC,qBAAqBA,CAACnL,KAAK,EAAE;IACzB,OAAOA,KAAK,IAAI,IAAI,IAAK,GAAEuN,MAAM,CAACvN,KAAK,CAAE,EAAC,KAAK,OAAO;EAC1D;EACAsM,UAAUA,CAAA,EAAG;IACT,IAAI,CAAC9H,MAAM,CAAC,IAAI,CAAC6H,IAAI,CAAC;EAC1B;EACAE,SAASA,CAAA,EAAG;IACR,IAAI,CAACR,eAAe,CACf/G,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,CACnByH,SAAS,CAAC;MACXrP,IAAI,EAAEuG,QAAQ,IAAI;QACd,IAAI,CAACY,MAAM,CAACZ,QAAQ,CAAC,CAAC4J,IAAI,CAAC,MAAM;UAC7B,IAAI,CAACxB,IAAI,CAACsB,IAAI,CAAC1J,QAAQ,CAAC;QAC5B,CAAC,CAAC;MACN,CAAC;MACDzD,KAAK,EAAGA,KAAK,IAAK,IAAI,CAACA,KAAK,CAACmN,IAAI,CAACnN,KAAK;IAC3C,CAAC,CAAC;EACN;EACAsM,kBAAkBA,CAAA,EAAG;IACjB,IAAI,CAACjI,MAAM,CAAC,IAAI,CAACC,OAAO,CAAC2I,aAAa,CAAC/G,SAAS,EAAE,IAAI,CAAC;EAC3D;EACAgH,aAAaA,CAAA,EAAG;IACZ,IAAI,IAAI,CAACxB,WAAW,EAAE;MAClB,IAAI,CAAC4B,cAAc,CAAC,IAAI,CAAChJ,OAAO,CAAC2I,aAAa,EAAE3M,WAAW,CAACiN,WAAW,CAAC;MACxE,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAAClJ,OAAO,CAAC2I,aAAa,EAAE;QAC9CQ,gBAAgB,EAAE,IAAI,CAACC,YAAY;QACnCC,QAAQ,EAAE,IAAI,CAACC,IAAI;QACnBC,UAAU,EAAE,IAAI,CAACC,MAAM;QACvBC,UAAU,EAAE,IAAI,CAACC,MAAM;QACvBC,QAAQ,EAAE,IAAI,CAACC;MACnB,CAAC,CAAC;IACN;IACA,IAAI,IAAI,CAAC5C,aAAa,EAAE;MACpB,IAAI,CAACkC,gBAAgB,CAAC,IAAI,CAAClJ,OAAO,CAAC2I,aAAa,EAAE;QAAEkB,QAAQ,EAAE,IAAI,CAACtE,IAAI;QAAEuE,cAAc,EAAE,IAAI,CAACC;MAAW,CAAC,CAAC;IAC/G;IACA,IAAI,IAAI,CAAC7C,WAAW,EAAE;MAClB,IAAI,CAAC8B,cAAc,CAAC,IAAI,CAAChJ,OAAO,CAAC2I,aAAa,EAAE3M,WAAW,CAACgO,WAAW,CAAC;MACxE,IAAI,CAACd,gBAAgB,CAAC,IAAI,CAAClJ,OAAO,CAAC2I,aAAa,EAAE;QAAEsB,SAAS,EAAE,IAAI,CAACC;MAAM,CAAC,CAAC;IAChF;EACJ;EACAlB,cAAcA,CAAChJ,OAAO,EAAEmK,MAAM,EAAE;IAC5B,MAAMjH,WAAW,GAAGlD,OAAO,CAACiB,gBAAgB,CAAC,KAAK,CAAC;IACnD,KAAK,IAAIkC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,WAAW,CAACpB,MAAM,EAAEqB,CAAC,EAAE,EAAE;MACzC,MAAMiH,OAAO,GAAGD,MAAM,YAAYjJ,KAAK,GAAGiJ,MAAM,GAAG,CAACA,MAAM,CAAC;MAC3DjH,WAAW,CAACG,IAAI,CAACF,CAAC,CAAC,CAAC5B,SAAS,CAACC,GAAG,CAAC,GAAG4I,OAAO,CAAC;IACjD;EACJ;EACAlB,gBAAgBA,CAAClJ,OAAO,EAAEjD,OAAO,EAAE;IAC/B,MAAMmG,WAAW,GAAGlD,OAAO,CAACiB,gBAAgB,CAAC,KAAK,CAAC;IACnD,KAAK,IAAIkC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,WAAW,CAACpB,MAAM,EAAEqB,CAAC,EAAE,EAAE;MACzCoD,MAAM,CAAC8D,IAAI,CAACtN,OAAO,CAAC,CAACqE,OAAO,CAACkJ,MAAM,IAAI;QACnC,MAAMC,cAAc,GAAGxN,OAAO,CAACuN,MAAM,CAAC;QACtC,IAAIC,cAAc,EAAE;UAChB,MAAMC,aAAa,GAAG,IAAI,CAACC,UAAU,CAACH,MAAM,CAAC;UAC7CpH,WAAW,CAACG,IAAI,CAACF,CAAC,CAAC,CAACuH,YAAY,CAACF,aAAa,EAAED,cAAc,CAACI,QAAQ,CAAC,CAAC,CAAC;QAC9E;MACJ,CAAC,CAAC;IACN;EACJ;EACAF,UAAUA,CAAClP,KAAK,EAAE;IACd,MAAMqP,UAAU,GAAGrP,KAAK,CAACsP,KAAK,CAAC,UAAU,CAAC;IAC1C,IAAI,CAACD,UAAU,EAAE;MACb,OAAOrP,KAAK;IAChB;IACA,IAAIuP,GAAG,GAAGvP,KAAK,CAACoP,QAAQ,CAAC,CAAC;IAC1B,KAAK,IAAIxH,CAAC,GAAG,CAAC,EAAE4H,CAAC,GAAGH,UAAU,CAAC9I,MAAM,EAAEqB,CAAC,GAAG4H,CAAC,EAAE5H,CAAC,EAAE,EAAE;MAC/C2H,GAAG,GAAGA,GAAG,CAACE,OAAO,CAAC,IAAIC,MAAM,CAACL,UAAU,CAACzH,CAAC,CAAC,CAAC,EAAE,GAAG,GAAGyH,UAAU,CAACzH,CAAC,CAAC,CAAC+H,WAAW,CAAC,CAAC,CAAC;IACnF;IACA,IAAIJ,GAAG,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;MACzBL,GAAG,GAAGA,GAAG,CAACK,KAAK,CAAC,CAAC,CAAC;IACtB;IACA,OAAOL,GAAG;EACd;EAAC,QAAAjS,CAAA,GACQ,IAAI,CAACC,IAAI,YAAAsS,0BAAApS,CAAA;IAAA,YAAAA,CAAA,IAAwFwN,iBAAiB,EAplB3BtQ,EAAE,CAAAmV,iBAAA,CAolB2CnV,EAAE,CAACoV,UAAU,GAplB1DpV,EAAE,CAAAmV,iBAAA,CAolBqEvO,eAAe,GAplBtF5G,EAAE,CAAAmV,iBAAA,CAolBiGnV,EAAE,CAACqV,gBAAgB;EAAA,CAA4C;EAAA,QAAAtS,EAAA,GACzP,IAAI,CAACC,IAAI,kBArlB8EhD,EAAE,CAAAiD,iBAAA;IAAAC,IAAA,EAqlBJoN,iBAAiB;IAAAnN,SAAA;IAAAmS,MAAA;MAAA5D,IAAA;MAAApH,GAAA;MAAA/B,gBAAA;MAAAJ,MAAA;MAAAM,SAAA;MAAA6J,wBAAA;MAAAC,uBAAA;MAAAnK,KAAA;MAAAM,KAAA;MAAAC,YAAA;MAAAN,OAAA;MAAAO,cAAA;MAAAkI,aAAA;MAAAzB,IAAA;MAAAwE,UAAA;MAAA7C,WAAA;MAAAgD,KAAA;MAAA9C,WAAA;MAAAgC,YAAA;MAAAE,IAAA;MAAAE,MAAA;MAAAE,MAAA;MAAAE,IAAA;IAAA;IAAA6B,OAAA;MAAA/P,KAAA;MAAA6L,IAAA;MAAAC,KAAA;IAAA;IAAAlO,UAAA;IAAAC,QAAA,GArlBfrD,EAAE,CAAAwV,oBAAA,EAAFxV,EAAE,CAAAsD,mBAAA;IAAAmS,kBAAA,EAAA1T,GAAA;IAAAwB,KAAA;IAAAC,IAAA;IAAAE,QAAA,WAAAgS,2BAAA9R,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QAAF5D,EAAE,CAAA2V,eAAA;QAAF3V,EAAE,CAAA4V,YAAA,EAqlBwwB,CAAC;MAAA;IAAA;IAAAnR,aAAA;EAAA,EAAoB;AACn4B;AACA;EAAA,QAAAE,SAAA,oBAAAA,SAAA,KAvlBoG3E,EAAE,CAAA4E,iBAAA,CAulBX0L,iBAAiB,EAAc,CAAC;IAC/GpN,IAAI,EAAEjD,SAAS;IACf4E,IAAI,EAAE,CAAC;MACC;MACAC,QAAQ,EAAE,sBAAsB;MAChCpB,QAAQ,EAAE,2BAA2B;MACrCN,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAEF,IAAI,EAAElD,EAAE,CAACoV;EAAW,CAAC,EAAE;IAAElS,IAAI,EAAE0D;EAAgB,CAAC,EAAE;IAAE1D,IAAI,EAAElD,EAAE,CAACqV;EAAiB,CAAC,CAAC,EAAkB;IAAE3D,IAAI,EAAE,CAAC;MAChIxO,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE4J,GAAG,EAAE,CAAC;MACNpH,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE6H,gBAAgB,EAAE,CAAC;MACnBrF,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEyH,MAAM,EAAE,CAAC;MACTjF,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE+H,SAAS,EAAE,CAAC;MACZvF,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE4R,wBAAwB,EAAE,CAAC;MAC3BpP,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE6R,uBAAuB,EAAE,CAAC;MAC1BrP,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE0H,KAAK,EAAE,CAAC;MACRlF,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEgI,KAAK,EAAE,CAAC;MACRxF,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEiI,YAAY,EAAE,CAAC;MACfzF,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE2H,OAAO,EAAE,CAAC;MACVnF,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEkI,cAAc,EAAE,CAAC;MACjB1F,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEoQ,aAAa,EAAE,CAAC;MAChB5N,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE2O,IAAI,EAAE,CAAC;MACPnM,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEmT,UAAU,EAAE,CAAC;MACb3Q,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEsQ,WAAW,EAAE,CAAC;MACd9N,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEsT,KAAK,EAAE,CAAC;MACR9Q,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEwQ,WAAW,EAAE,CAAC;MACdhO,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEwS,YAAY,EAAE,CAAC;MACfhQ,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE0S,IAAI,EAAE,CAAC;MACPlQ,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE4S,MAAM,EAAE,CAAC;MACTpQ,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE8S,MAAM,EAAE,CAAC;MACTtQ,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEgT,IAAI,EAAE,CAAC;MACPxQ,IAAI,EAAExC;IACV,CAAC,CAAC;IAAE8E,KAAK,EAAE,CAAC;MACRtC,IAAI,EAAEvC;IACV,CAAC,CAAC;IAAE0Q,IAAI,EAAE,CAAC;MACPnO,IAAI,EAAEvC;IACV,CAAC,CAAC;IAAE2Q,KAAK,EAAE,CAAC;MACRpO,IAAI,EAAEvC;IACV,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAMkV,YAAY,CAAC;EACf1T,WAAWA,CAAC2T,YAAY,EAAEC,UAAU,EAAE3E,eAAe,EAAErH,gBAAgB,EAAEiM,IAAI,EAAE;IAC3E,IAAI,CAACF,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAAC3E,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACrH,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACiM,IAAI,GAAGA,IAAI;EACpB;EACM5Q,SAASA,CAACC,KAAK,EAAEwB,OAAO,EAAE;IAAA,IAAAoP,MAAA;IAAA,OAAA9D,iBAAA;MAC5B,IAAI9M,KAAK,IAAI,IAAI,EAAE;QACf,OAAO,EAAE;MACb;MACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC3BE,OAAO,CAACC,KAAK,CAAE,6DAA4D,OAAOH,KAAM,GAAE,CAAC;QAC3F,OAAOA,KAAK;MAChB;MACA,MAAM4D,QAAQ,SAASgN,MAAI,CAAC7E,eAAe,CAACpI,KAAK,CAAC3D,KAAK,EAAEwB,OAAO,CAAC;MACjEoP,MAAI,CAACD,IAAI,CAACE,QAAQ,CACb5T,IAAI,CAACb,KAAK,CAAC,CAAC,CAAC,CACbsQ,SAAS,CAAC,MAAMkE,MAAI,CAAC7E,eAAe,CAACvH,MAAM,CAACoM,MAAI,CAACF,UAAU,CAACtD,aAAa,EAAE5L,OAAO,EAAEoP,MAAI,CAAClM,gBAAgB,CAAC,CAAC;MAChH,OAAOkM,MAAI,CAACH,YAAY,CAACK,uBAAuB,CAAClN,QAAQ,CAAC;IAAC;EAC/D;EAAC,QAAAtG,CAAA,GACQ,IAAI,CAACC,IAAI,YAAAwT,qBAAAtT,CAAA;IAAA,YAAAA,CAAA,IAAwF+S,YAAY,EA3qBtB7V,EAAE,CAAAmV,iBAAA,CA2qBsCrT,EAAE,CAACiO,YAAY,OA3qBvD/P,EAAE,CAAAmV,iBAAA,CA2qBkEnV,EAAE,CAACoV,UAAU,OA3qBjFpV,EAAE,CAAAmV,iBAAA,CA2qB4FvO,eAAe,OA3qB7G5G,EAAE,CAAAmV,iBAAA,CA2qBwHnV,EAAE,CAACqV,gBAAgB,OA3qB7IrV,EAAE,CAAAmV,iBAAA,CA2qBwJnV,EAAE,CAACqW,MAAM;EAAA,CAAuC;EAAA,QAAAtT,EAAA,GACjS,IAAI,CAAC2C,KAAK,kBA5qB6E1F,EAAE,CAAA2F,YAAA;IAAAC,IAAA;IAAA1C,IAAA,EA4qBM2S,YAAY;IAAAhQ,IAAA;IAAAzC,UAAA;EAAA,EAAyC;AACjK;AACA;EAAA,QAAAuB,SAAA,oBAAAA,SAAA,KA9qBoG3E,EAAE,CAAA4E,iBAAA,CA8qBXiR,YAAY,EAAc,CAAC;IAC1G3S,IAAI,EAAE9C,IAAI;IACVyE,IAAI,EAAE,CAAC;MACCe,IAAI,EAAE,UAAU;MAChBxC,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAEF,IAAI,EAAEpB,EAAE,CAACiO;EAAa,CAAC,EAAE;IAAE7M,IAAI,EAAElD,EAAE,CAACoV;EAAW,CAAC,EAAE;IAAElS,IAAI,EAAE0D;EAAgB,CAAC,EAAE;IAAE1D,IAAI,EAAElD,EAAE,CAACqV;EAAiB,CAAC,EAAE;IAAEnS,IAAI,EAAElD,EAAE,CAACqW;EAAO,CAAC,CAAC;AAAA;AAErK,SAASC,eAAeA,CAACC,oBAAoB,EAAE;EAC3C,OAAO,CACH3P,eAAe,EACf2P,oBAAoB,EAAEC,MAAM,IAAI,EAAE,EAClCD,oBAAoB,EAAEtP,gBAAgB,IAAI,EAAE,EAC5CsP,oBAAoB,EAAEjO,aAAa,IAAI,EAAE,EACzC;IACImO,OAAO,EAAE1Q,iBAAiB;IAC1B2Q,QAAQ,EAAEH,oBAAoB,EAAEI,gBAAgB,IAAI;EACxD,CAAC,EACD;IACIF,OAAO,EAAElQ,gBAAgB;IACzBmQ,QAAQ,EAAEH,oBAAoB,EAAE3M,QAAQ,IAAIhJ,eAAe,CAACgW;EAChE,CAAC,CACJ;AACL;AAEA,MAAMC,kBAAkB,GAAG,CACvB3U,wBAAwB,EACxBiD,YAAY,EACZmL,iBAAiB,EACjBuF,YAAY,CACf;AACD,MAAMiB,cAAc,CAAC;EACjB,OAAOC,OAAOA,CAACR,oBAAoB,EAAE;IACjC,OAAO;MACHS,QAAQ,EAAEF,cAAc;MACxBG,SAAS,EAAE,CACPX,eAAe,CAACC,oBAAoB,CAAC;IAE7C,CAAC;EACL;EACA,OAAOW,QAAQA,CAAA,EAAG;IACd,OAAO;MACHF,QAAQ,EAAEF;IACd,CAAC;EACL;EAAC,QAAAnU,CAAA,GACQ,IAAI,CAACC,IAAI,YAAAuU,uBAAArU,CAAA;IAAA,YAAAA,CAAA,IAAwFgU,cAAc;EAAA,CAAkD;EAAA,QAAA/T,EAAA,GACjK,IAAI,CAACqU,IAAI,kBA5tB8EpX,EAAE,CAAAqX,gBAAA;IAAAnU,IAAA,EA4tBS4T;EAAc,EAMjG;EAAA,QAAAQ,EAAA,GACf,IAAI,CAACC,IAAI,kBAnuB8EvX,EAAE,CAAAwX,gBAAA;IAAAxS,OAAA,GAmuBmCjF,YAAY;EAAA,EAAI;AACzJ;AACA;EAAA,QAAA4E,SAAA,oBAAAA,SAAA,KAruBoG3E,EAAE,CAAA4E,iBAAA,CAquBXkS,cAAc,EAAc,CAAC;IAC5G5T,IAAI,EAAErC,QAAQ;IACdgE,IAAI,EAAE,CAAC;MACCG,OAAO,EAAE,CAACjF,YAAY,EAAE,GAAG8W,kBAAkB,CAAC;MAC9CY,OAAO,EAAEZ;IACb,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA,IAAIa,UAAU;AACd,CAAC,UAAUA,UAAU,EAAE;EACnB,IAAIC,aAAa;EACjB,CAAC,UAAUA,aAAa,EAAE;IACtB;AACR;AACA;IACQA,aAAa,CAAC,QAAQ,CAAC,GAAG,QAAQ;IAClC;AACR;AACA;IACQA,aAAa,CAAC,OAAO,CAAC,GAAG,OAAO;IAChC;AACR;AACA;IACQA,aAAa,CAAC,YAAY,CAAC,GAAG,YAAY;IAC1C;AACR;AACA;AACA;AACA;AACA;IACQA,aAAa,CAAC,SAAS,CAAC,GAAG,SAAS;EACxC,CAAC,EAAEA,aAAa,GAAGD,UAAU,CAACC,aAAa,KAAKD,UAAU,CAACC,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;EAC/E,IAAIC,KAAK;EACT,CAAC,UAAUA,KAAK,EAAE;IACd;AACR;AACA;IACQA,KAAK,CAAC,MAAM,CAAC,GAAG,MAAM;IACtB;AACR;AACA;IACQA,KAAK,CAAC,QAAQ,CAAC,GAAG,QAAQ;IAC1B;AACR;AACA;IACQA,KAAK,CAAC,MAAM,CAAC,GAAG,MAAM;IACtB;AACR;AACA;IACQA,KAAK,CAAC,SAAS,CAAC,GAAG,SAAS;IAC5B;AACR;AACA;IACQA,KAAK,CAAC,SAAS,CAAC,GAAG,SAAS;EAChC,CAAC,EAAEA,KAAK,GAAGF,UAAU,CAACE,KAAK,KAAKF,UAAU,CAACE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;EACvD,IAAIC,QAAQ;EACZ,CAAC,UAAUA,QAAQ,EAAE;IACjBA,QAAQ,CAACA,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;IACzCA,QAAQ,CAACA,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;IACvCA,QAAQ,CAACA,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;IACvCA,QAAQ,CAACA,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;IACzCA,QAAQ,CAACA,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EAC7C,CAAC,EAAEA,QAAQ,GAAGH,UAAU,CAACG,QAAQ,KAAKH,UAAU,CAACG,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,EAAEH,UAAU,KAAKA,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;;AAEnC;AACA;AACA;;AAEA,SAASzS,iBAAiB,EAAE/C,wBAAwB,EAAEsE,gBAAgB,EAAEtB,oBAAoB,EAAEC,YAAY,EAAEY,iBAAiB,EAAEC,cAAc,EAAEsK,iBAAiB,EAAEwG,cAAc,EAAEjB,YAAY,EAAEjP,eAAe,EAAE8Q,UAAU,EAAE5R,WAAW,EAAES,gBAAgB,EAAEH,uBAAuB,EAAEC,mCAAmC,EAAEJ,uBAAuB,EAAEC,mBAAmB,EAAEC,qBAAqB,EAAEG,yBAAyB,EAAEgQ,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}