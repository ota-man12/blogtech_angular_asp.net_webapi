{"ast":null,"code":"import { CookieService } from 'ngx-cookie-service';\nimport { Router } from '@angular/router';\nimport { inject } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nimport { jwtDecode } from 'jwt-decode';\nexport const authGuard = (route, state) => {\n  const cookieService = inject(CookieService);\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  const user = authService.getUser();\n  // Check for JWT\n  let token = cookieService.get('Authorization');\n  if (token && user) {\n    token = token.replace('Bearer', '');\n    const decoded_token = jwtDecode(token);\n    //Check if toke has expired\n    const expirationDate = decoded_token.exp * 1000;\n    const currentTime = new Date().getTime();\n    if (expirationDate < currentTime) {\n      authService.logout();\n      return router.createUrlTree(['/login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n    } else {\n      //Token is still valid\n      if (user.roles.includes('Writer')) {\n        return true;\n      } else {\n        alert('Una');\n      }\n    }\n  } else {\n    //Logout is token is not defined\n    authService.logout();\n    return router.createUrlTree(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n  }\n};","map":{"version":3,"names":["CookieService","Router","inject","AuthService","jwtDecode","authGuard","route","state","cookieService","authService","router","user","getUser","token","get","replace","decoded_token","expirationDate","exp","currentTime","Date","getTime","logout","createUrlTree","queryParams","returnUrl","url","roles","includes","alert"],"sources":["/Users/obakengtaphane/Desktop/Projects/blogTech/UI/blogtech/src/app/features/auth/guards/auth.guard.ts"],"sourcesContent":["import { CookieService } from 'ngx-cookie-service';\nimport { CanActivateFn, Router } from '@angular/router';\nimport { inject } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nimport { jwtDecode } from 'jwt-decode';\n\nexport const authGuard: CanActivateFn = (route, state) => {\n  const cookieService = inject(CookieService);\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  const user = authService.getUser();\n\n  // Check for JWT\n  let token = cookieService.get('Authorization');\n\n  if (token && user) {\n    token = token.replace('Bearer', '');\n    const decoded_token: any = jwtDecode(token);\n\n    //Check if toke has expired\n    const expirationDate = decoded_token.exp * 1000;\n    const currentTime = new Date().getTime();\n\n    if (expirationDate < currentTime) {\n      authService.logout();\n      return router.createUrlTree(['/login'], {\n        queryParams: { returnUrl: state.url },\n      });\n    } else {\n      //Token is still valid\n      if (user.roles.includes('Writer')) {\n        return true;\n      }else{\n        alert('Una')\n      }\n    }\n  } else {\n    //Logout is token is not defined\n    authService.logout();\n    return router.createUrlTree(['/login'], {\n      queryParams: { returnUrl: state.url },\n    });\n  }\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAAwBC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,SAAS,QAAQ,YAAY;AAEtC,OAAO,MAAMC,SAAS,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EACvD,MAAMC,aAAa,GAAGN,MAAM,CAACF,aAAa,CAAC;EAC3C,MAAMS,WAAW,GAAGP,MAAM,CAACC,WAAW,CAAC;EACvC,MAAMO,MAAM,GAAGR,MAAM,CAACD,MAAM,CAAC;EAC7B,MAAMU,IAAI,GAAGF,WAAW,CAACG,OAAO,EAAE;EAElC;EACA,IAAIC,KAAK,GAAGL,aAAa,CAACM,GAAG,CAAC,eAAe,CAAC;EAE9C,IAAID,KAAK,IAAIF,IAAI,EAAE;IACjBE,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IACnC,MAAMC,aAAa,GAAQZ,SAAS,CAACS,KAAK,CAAC;IAE3C;IACA,MAAMI,cAAc,GAAGD,aAAa,CAACE,GAAG,GAAG,IAAI;IAC/C,MAAMC,WAAW,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAExC,IAAIJ,cAAc,GAAGE,WAAW,EAAE;MAChCV,WAAW,CAACa,MAAM,EAAE;MACpB,OAAOZ,MAAM,CAACa,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;QACtCC,WAAW,EAAE;UAAEC,SAAS,EAAElB,KAAK,CAACmB;QAAG;OACpC,CAAC;KACH,MAAM;MACL;MACA,IAAIf,IAAI,CAACgB,KAAK,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACjC,OAAO,IAAI;OACZ,MAAI;QACHC,KAAK,CAAC,KAAK,CAAC;;;GAGjB,MAAM;IACL;IACApB,WAAW,CAACa,MAAM,EAAE;IACpB,OAAOZ,MAAM,CAACa,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;MACtCC,WAAW,EAAE;QAAEC,SAAS,EAAElB,KAAK,CAACmB;MAAG;KACpC,CAAC;;AAEN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}