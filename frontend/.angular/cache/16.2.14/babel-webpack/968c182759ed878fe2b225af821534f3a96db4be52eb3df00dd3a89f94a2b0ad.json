{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nexport class AuthInterceptor {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n  }\n  intercept(request, next) {\n    const authRequest = request.clone({\n      setHeaders: {\n        'Authorization': this.cookieService.get('')\n      }\n    });\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.CookieService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["AuthInterceptor","constructor","cookieService","intercept","request","next","authRequest","clone","setHeaders","get","_","i0","ɵɵinject","i1","CookieService","_2","factory","ɵfac"],"sources":["/Users/obakengtaphane/Desktop/Projects/blogTech/UI/blogtech/src/app/core/interceptors/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private cookieService: CookieService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const authRequest = request.clone({\n      setHeaders:{\n        'Authorization': this.cookieService.get('')\n      }\n    })\n  }\n}\n"],"mappings":";;AAWA,OAAM,MAAOA,eAAe;EAE1BC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;EAAkB;EAEnDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,WAAW,GAAGF,OAAO,CAACG,KAAK,CAAC;MAChCC,UAAU,EAAC;QACT,eAAe,EAAE,IAAI,CAACN,aAAa,CAACO,GAAG,CAAC,EAAE;;KAE7C,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBAVUV,eAAe,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAff,eAAe;IAAAgB,OAAA,EAAfhB,eAAe,CAAAiB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}