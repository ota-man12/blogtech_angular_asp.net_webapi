{"ast":null,"code":"import { CookieService } from 'ngx-cookie-service';\nimport { Router } from '@angular/router';\nimport { inject } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nimport { jwtDecode } from 'jwt-decode';\nexport const authGuard = (route, state) => {\n  const cookieService = inject(CookieService);\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  // Check for JWT\n  let token = cookieService.get('Authorization');\n  if (token) {\n    token = token.replace('Bearer', '');\n    const decoded_token = jwtDecode(token);\n    //Check if toke has expired\n    const expirationDate = de;\n  } else {\n    //Logout is token is not defined\n    authService.logout();\n    return router.createUrlTree(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n  }\n};","map":{"version":3,"names":["CookieService","Router","inject","AuthService","jwtDecode","authGuard","route","state","cookieService","authService","router","token","get","replace","decoded_token","expirationDate","de","logout","createUrlTree","queryParams","returnUrl","url"],"sources":["/Users/obakengtaphane/Desktop/Projects/blogTech/UI/blogtech/src/app/features/auth/guards/auth.guard.ts"],"sourcesContent":["import { CookieService } from 'ngx-cookie-service';\nimport { CanActivateFn, Router } from '@angular/router';\nimport { inject } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nimport { jwtDecode } from 'jwt-decode';\n\nexport const authGuard: CanActivateFn = (route, state) => {\n  const cookieService = inject(CookieService);\n  const authService = inject(AuthService);\n  const router = inject(Router);\n\n  // Check for JWT\n  let token = cookieService.get('Authorization');\n\n  if (token) {\n    token = token.replace('Bearer', '');\n    const decoded_token = jwtDecode(token);\n\n    //Check if toke has expired\n    const expirationDate = de\n  } else {\n    //Logout is token is not defined\n    authService.logout();\n    return router.createUrlTree(['/login'], {\n      queryParams: { returnUrl: state.url },\n    });\n  }\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAAwBC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,SAAS,QAAQ,YAAY;AAEtC,OAAO,MAAMC,SAAS,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EACvD,MAAMC,aAAa,GAAGN,MAAM,CAACF,aAAa,CAAC;EAC3C,MAAMS,WAAW,GAAGP,MAAM,CAACC,WAAW,CAAC;EACvC,MAAMO,MAAM,GAAGR,MAAM,CAACD,MAAM,CAAC;EAE7B;EACA,IAAIU,KAAK,GAAGH,aAAa,CAACI,GAAG,CAAC,eAAe,CAAC;EAE9C,IAAID,KAAK,EAAE;IACTA,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IACnC,MAAMC,aAAa,GAAGV,SAAS,CAACO,KAAK,CAAC;IAEtC;IACA,MAAMI,cAAc,GAAGC,EAAE;GAC1B,MAAM;IACL;IACAP,WAAW,CAACQ,MAAM,EAAE;IACpB,OAAOP,MAAM,CAACQ,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;MACtCC,WAAW,EAAE;QAAEC,SAAS,EAAEb,KAAK,CAACc;MAAG;KACpC,CAAC;;AAEN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}